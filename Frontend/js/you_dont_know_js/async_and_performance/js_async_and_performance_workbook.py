рассматривание шаблонов вдобавок к механике js для управления async разработкой
асинхронность
#критична для:
	упрощения написания
	упрощения обслуживания
	быстродействия
async
#
parallel
#
concurrent
#
callback
#fx обратного вызова
#основной метод обеспечения асинхронности
#callback fx сама по себе недостаточна для современных требований к асинхронной разработки
#два главных недостатка программирования только с помощью callback fx 
	потеря доверия к инверсии управления
		инверсия управления
		#IoC(Inversion Of Control)
		#принцип ООП
	нехватка заурядной целесообразности
    #РЕШЕНИЕ
    #комбинация promise & genarator - самый эффективный шаблон асинхронного программирования
	promises
	#механизм/шаблон
	#"почти явный шаблон" позволяющий работать по работать более параллельно
	#ES6+
	#независимые от времени обертки(wrappers?) вокруг future value позволяющие "рассуждать о них" независимо от их готовности
	#эффективно решают проблемы доверия к IoC(Inversion Of Control) маршрутизируя callback fx посредством доверительного и компонуемого механизма обещаний
	generators
	#шаблон/механизм
	#ES6+
	#предоставляют новый режим выполнения для fx(позволяет создавать генераторные fx)
	#возможность "приостановка-и-продолжение" позволяет синхронному, {xn}-выглядящему коду быть обработанным асинхронно
	#устраняет путаницу с нелинейными, нелокальными переходами в callback fx делая код осмысленнее
yield
#походу оператор позволяющий создавать генераторные fx
#генератор м.б. приостановлен в точках с yield и продолжен асинхронно позже
ES7
#⊃ мн-во усовершенствований в асинхронности построенные на основе генераторов и общаний
ДРУГИЕ ИНСТРУМЕНТЫ ПАРАЛЛЕЛИЗМА
Web Workers
#параллелизм программ
SIMD
#параллелизм данных
ТЕХНИКИ НИЗКОУРОВНЕВОЙ ОПТИМИЗАЦИИ
	ASM.js
ОПТИМИЗАЦИЯ ПРОИЗВОДИТЕЛЬНОСТИ С ТОЧКИ ЗРЕНИЯ ПРАВИЛЬНЫХ МЕТРИК
#какие виды производительности стоит рассматривать, а какие игнорировать