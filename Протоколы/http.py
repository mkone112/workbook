HTTP
#hyperTextTransfer Protocol - протокол передачи гипертекста
#протокол передачи данных прикладного уровня изначально - в виде гипертекстовых документов формата HTML
#исп для передачи ∀ данных
#основан на клиент-серверной архитектуре -> предпологает ∃
	клиентов
	#инициализирует соединение и посылвает запрос
	сервер
	#ожидает соединение для получения запроса и произведя действия возвращают msg ⊃ результат
#исп больше p2p
#исп как "транспорт" для других протоколов app-уровня 
	SOAP
	XML-RPC
	WebDAV
	...
#осн obj манипуляций - ресурс на который указывает uri в запросе клиента
	#ресурс - обычно файл, но мб и логический? obj | абстрация
#особенность - возможность указать в запросе и ответе способ предоставления одного ресурса по раличным параметрам
	формат
	кодировка
	язык
	..
	#для этого исп HTTP-заголовок
	#благодаря возм указания способа кодирования msg можно обмениваться bin данными хотя протокол - текстовый
#~FTP|SMTP
#для идентификации исп глобальные URI 
#в отличие от многих других протоколов не сохраняет состояния -> компоненты исп http могут сами сохранять состояние(куки/сессии)
#браузер может отслеживать задержки ответов на запросы
#сервер может ⊃ ip-адреса и заголовки запросов последних клиентов
	#сам протокол не осведомлен о состоянии


ИСТОРИЯ HTTP
	0.9
		упорядочивание правил взаимодействия клиент-сервер
		разделение компонентов клиент-сервер
		осн семантические/синтаксические положения
		строка запроса
			GET URI
			#поддерживал только GET
	1.0
	#практическая реализация
	#rfc 1945
	1.1
	#современная версия принятая в июне 1999
		режим постоянного соединения
		#TCP-соединение мб открытым после ответа на запрос -> неск запросов на соединение
		#клиент обязан посылать информацию о имени хоста к которому он обращается -> упрощение организации виртуального хостинго
			запрос должен ⊃ заголовок host
	2
	#11 feb 2015 финальный черновик
	#бинарный
	#мультиплексирование запросов
	#приоритизация запросов
	#сжатие заголовков
	#загрузка элтов || в одном TCP -соединении
	#поддержка проактивных push-уведомлений со стороны сервера
	
СТРУКТУРА HTTP
∀ HTTP-msg ⊃
	ЗАПРОС
		Starting line
		#тип msg
		#различаются для запроса/ответа
			<Method> <URI> HTTP/<ver>
				<Method>
				#тип запроса
				<URI>
				#путь к документу
			#пример
				GET /wiki/HTTP HTTP/1.0
				Host: ru.wikipedia.org
		Headers
		#определяет тело, параметры передачи, etc
		Message Body
		#данные отделенные пустой стрококй
		#необязательно
	ОТВЕТ
		Starting line
			HTTP/<ver> <status_code> <Reason_Phrase>
			<status_code>
			#код состояния
			#3 цифры
			<Reason_Phrase>
			#краткое пояснение
			#не влияет на msg необязательно
		#пример
			HTTP/1.0 200 OK


ГРУППЫ ЗАГОЛОВКОВ
#именно в таком порядке рекомендуется посылать
#∀ осн для работы HTTP заголовки описаны в основных RFC
	General
	#могут включаться в ∀ msg
	
	
	Request
	#только запросы клиента
	
	
	Response
	#только ответы сервера
	
	
	Entity
	#?сопровождает ∀ сущность msg
#при нехватке ∃ -> можно создавать свои
		#традиционно к именуются с префиксом
			"X-"
			#для избежания конфликтов
			#примеры
				X-Powered-By
				X-Cache
			#некоторые разработчики исп свои префиксы
				Ms-Echo-Request
				Ms-Echo-Reply
				#введены MS для расширения WebDAV


ТЕЛО HTTP-msg
#message-body
#if ∃ -> передает тело obj связанного с запросом|ответом
#отличается от тела obj(entity-body) only if применяется кодирование передачи что указывается полем заголовка Transfer-Encoding(см Transfer-Encoding)
#допустимость тела в msg
	запросы
	#тело может быть добавлено only if это допускает метод
	#отмечается присутствием полей
	
		Content-Length
		Transfer-Encoding
		
	ответы
	#включение тела зависит от
		метода
		#HEAD исключает тело
		кода состояния
		#∀ состояния ⊃ тело кроме
			1XX
			204
			304
			#даже if оно ⊃ нулевую длинну


ПОЛЯ ЗАГОЛОВКА
#?=ЗАГОЛОВКИ
	Transfer-Encoding
	#указывает исп кодирование передачи
	#причина отличия тело HTTP-msg от тела obj(entity-body)
		message-body = entity-body
		| <entity-body закодировано согласно
		Transfer-Encoding>
	#должно исп для указания ∀ кодирования передачи, исп app для гарантии правильной и безопасной передачи msg
	#свво msg, а не obj -> мб добавлено|удалено ∀ app в цепи запросов/ответов
	
	entity-header
	#поле заголовка obj?
	#заставляет поверить в присутствие obj
	
	Content-Length
	#указывает допустимость тела в запросе
	
	Content-Type:<тип/подтип>
	#указывает харки тела(тип данных ⊂ файлу данных)
		
eng:entity:сущность

ЗАГОЛОВКИ
#str ⊂ HTTP-msg вида <name(key)>:<val>
#формат соотв общему формату заголовков текстовых сетевых msg ARPA
#должны отделятся от msg min одной пустой строкой

	Last-Modified
	#видимо последнее Δ страницы для сверки с кешем?
		Last-Modified: Sat, 16 Jan 2010 21:16:42 GMT
		
		
	Allow
	#может ⊃ список поддерживаемых методов
	#вроде возвращается при 501, 405
	
	ETag
	#какой-то ключ?
		ETag: "56d-9989200-1132c580"
		
	Connection
	#управление соединением?
		close
		keep-alive
		#видимо поддерживать
		#видимо таймаут указывается в отдельном заголовке Keep-Alive
	
	Content-Disposition
	#параметры
		name
		#соотв attr html тегов (напр <input>, <textarea>)
		filename
		#имя файла
	#кажется исп для создания вложений в POST запрос(см POST)
	
		Content-Disposition: form-data; name="MessageTitle"
		
		
	Keep-Alive
	#видимо указывает таймаут соединения для Connection
	
	
	Accept-Ranges
	#информирует клиета что он может запрашивать фрагменты по смещению в байтах
	#при отсутствии докачать файл вероятно нельзя?
		Accept-Ranges: bytes
		
		
	Referer
	#указывает что файл запрошен с главной
	#без него сервер может ответить 403 if запросы с других сайтов запрещены
		Referer: http://example.org/
	
	Server
	#вроде указания ПО сервера
		версия
		яп
		архитектура
	#примеры
		Server: Apache/2.2.4
		Server: Apache/2.2.11 (Win32) PHP/5.3.0
	
	
	Location
	#вроде возвращается при 201
	#⊃ URI нового ресурса
		HTTP/1.x Moved Permanently
		Location: http://example.com/about.html#contacts
	#возвращается при 3XX
	
	
	Date
	#вроде текущая дата
		Date: Thu, 19 Feb 2009 11:08:01 GMT
		
		
	User-Agent
	#User-Agent
	
	
	Cache-Control
	#чистить ли кеш
		private
		#сообщает ∀ серверам(в первую очередь proxy) - ответ должен кешироваться только клиентом(иначе другие пользователи могут переходить на не подходящий им домен)
	
	Accept-Language
	#язык содержимого которое готов принять клиент?
		Accept-Language: ru, en-us;q=0.7,en;q=0.3
		
		
	Accept-Charset
	#кодировка содержимого которое готов принять клиент?
		Accept-Charset: windows-1251,utf-8;q=0.7,*;q=0.7
	

	Accept-Encoding
	#шифрование?
		
	Accept
	#то что клиент ожидает/готов принять в качестве ответа?
		Accept: text/html, application/xhtml+xml, application/xml;q=0.9,*/*;q=0.8
		
		applications/x-www-form-urlencoded
		#можно передавать данные в виде словаря
		
	
	Authorization
	#⊃ данные для авторизации
	#~пользовательского заголовка определенной службы
		
	Host
	#адрес хоста к которому осущ запрос?
		Host: example.com
		
	Content-Range
	#информация о диапазоне передаваемого содержимого
		<единицы_измерения> <начальный_байт>-<конечный_байт>/<суммарный_размер>
	#исп при докачке
		Content-Range: bytes 88080384-160993791/160993792
		
	Range
	#диапазон исп при фрагментарной загрузке
		<единицы_измерения>=<начальный_байт>_<конечный_байт>
	#
		Range: bytes=6439716-80496894
		
		
	Content-Type
	#тип содержимого тела?
		Content-Type: text/plain; charset=windows-1251
		Content-Type: video/x-msvideo
		
	Content-Length
	#без указания клиенту не может организовать фрагментарную загрузку(?не уверен)
	#длинна тела?
		Content-Length: 110
	#при докакачке при передаче нескольких фрагментов ⊃ Σ V ∀ фрагментов
	
	
	If-Modified-Since
	#реализует условный GET
	#дата

	Vary
	#исп при согласовании содержимого(см согласование содержимого)

TCP/IP
#протокол
#исп протокол IP


IP
#протокол
#исп ip как уникальный адрес
		V4
		#4 байта
		V6
		#16байт
		#разделители :
			201:0ви8:85ф3:000:000:8ф2у:0370:7334
		#можно опускать ведущие нули(max 1 пропуск)
			fe80:0:0:0:0:0:0:1	->	fe80::1
#⊃ <номер сети> <номер узла>
#номер узла назначается независимо от локального адреса узла
#маршрутизатор ⊂ нескольким сетям -> ∀ его  порт ⊃ свой ip
#∀ узел может входить в неск сетей имея неск адресов ->
	IP адрес характеризует одно соедниение, а не один узел
#адрес изолированной сети ⊂ блокам
	10.0.0.0/8
	172.16.0.0/12
	192.168.0.0/16
#
	ТИПЫ АДРЕСАЦИИ
	#∃ два способа определеить сколько бит ⊂ маске, а сколько ip-адресу
		классовая адресация
		#INET
		#устарела
		#обычная запись без указания маски
		бесклассовая адресация
		#вытеснила INET во второй половине 90х
		#колво адресов опред маской подсети
			СРАВНЕНИЕ
			#запись вида 
				192.168.5.0/24 
				#заменяет указание диапазона адресов
				#CIDR-адрес
				#число после / - колво единичных разрядов в маске
					24 -> 11111111 11111111 11111111 00000000 -> 255.255.255.0
					#24 разряда - номер сети, остальные 32-24=8 под адреса хостов сети ->
						192.168.5.0.24
						#диапазон 192.168.5.1 - 192.168.5.254
						#адрес сети 192.168.5.0
							#формула
								ip.∀_компа_сети AND mask
								#адрес сети позволяет определить что компы в одной сети
						#широковещательный адрес сети 192.168.5.255
							#формула
								ip.∀_компа_сети OR NOT(mask)
							#восприниматеся ∀ компами сети как доп свой адрес -> пакет на этот адрес получают ∀ хосты сети как адресованный лично им
							#if на сетевой интерфейс хоста не явл маршрутизатором пакетов попадет пакет не предназначенный ему - он будет отброшен
						#в некоторых сисмах
							адрес сети
							широковещательный адрес
							#мб Δ


OSI
	Data Link Layer
	#(2)канальный/передачи данных
	#исп
		доставка кадров между узлами	
		передача данных узла того же сегмента lan
		обнаружение/исправление err физического уровня
	#примеры
		Ethernet многоузловых lan
		PPP
		ADCCP
		#двухузловой(точка-точка)
	#кадры
		не пересекают границ сетевого сегмента
		передаются {xn} с обработкой кадров подтверждения отсылаемых обратно получателем
	#тк маршрутизация и глобальная адресация осущ на более высоких уровнях osi -> протоколы DLL сосредоточены на локальной доставке и адресации
	#заголовок кадры ⊃ аппаратные адреса отправителя и получателя
		#аппаратные адреса одноуровневые в отл от иерархических и маршрутизируемых addr -> ∀ часть адреса не указывает на принадлежность к ∀ логической|физической группе
	#if устройства пытаются исп среду одновременно -> коллизии кадров
		#протоколы DLL уменьшают/предотвращают их
	#многие протоколы DLL !⊃ подтверждения о приеме кадров, некоторые !⊃ checksums для проверки целостности кадра
	#в яп доступ через драйвер сетевухи
	#ос ⊃ интерфейс взаимодействия канального и сетевого уровноней
		ODI
		NDIS
	#длинна пакет ограничена MTU
	#подуровни
		MAC
		#media(medium) access Control
		#управление доступом к среде
		#регулирует доступ к разделяемой физической среде
		#адресация и управление доступом к каналам -> неск терминалов|точек доступа могут общаться в многоточечной сети(lan|man) эмулирует полнодуплексный логический канал связи
			#~протокол множественного доступа - деление одной среды передачи неск узлами
			#разделяемые физические среды
				шина
				кольцо
				сети с хабами/беспроводные
				сети с полудуплексным подключением точка-точка
		#предотвращает коллизии пакетов if режим конкурирующего доступа - метод доступа к каналу | зарезервированы ресурсы для создания логического канала(при исп метода доступа к каналу на основе метода кольцевого переключателя/разбиения среды на каналы)
		#механизм множественного доступа основан на схеме мультиплексирования
		#max используемый протокол множественного доступа основан на CSMA/CD используемым Ethernet
		#одно из расширений osi
		#нижний(интейфейс между LLC и физическим(первым) уровнем osi)
		#вроде стараются дать ∀ устройству свой
		#могут исп для доставки через мыльницы(повторители/хабы/свитчи)
		#не требуется при полнодуплексной связи точка-точка, но поля MAC-адреса ⊂ в некоторые протоколы точка-точка для совместимости
		LLC
		#logical link control
		#обслуживание сетевого уровня
		#верхний
	#fx
		получение доступа к среде передачи
		#требуется всегда кроме if реализована полносвязная топология
		выделение границ кадра
		#требуется всегда
		#возможные решения
			резервирование части {xn} обозначающей конец кадра
		аппаратная адресация
		#адресация канального уровня
		#исп if кадр могут получить неск адресатов
		#в lan всегда исп mac
		обеспечение корректности принимаемых данных
		адресация протоколов выше
		#при декапсуляции указание формата вложенного PDU(?) упрощает обработку -> чаще всего указывается протокол ⊂ в поле данных кроме if поле может ⊃ только один протокол
MAN
#городская сеть

ПОЛНОСВЯЗНАЯ ТОПОЛОГИЯ
#пример
	два пк соединены через кроссовер|пк в полнодуплексном режиме
	

MTU
#мб Δ
	
ОСОБЫЕ IP АДРЕСА
	if ∀ двоичные разряды = 1 -> пакет с таким назначением рассылается ∀ узлам этой сети(в которой находится источник)
	#ограниченное широковещательное msg(limited broadcast)
	if ∀ поле номера узла ⊃ только 1 -> пакет рассылается ∀ узлам сети с заданным номером сети
	#напр в сети 192.168.5.0 с маской 255.255.255.0 пакет с адресом 192.168.5.255 доставляется ∀ узлам сети
	#широковещательное сообщение(directed broadcast)

ПРОТОКОЛЫ ПОЛУЧЕНИЯ IP
#установления связи?
	BOOTP
	#RFC 951
	#простой протокол исп для бездисковых станций
	#вытеснен dhcp
	DHCP
	#RFC 2131
	#max распространен
	IPCP
	#RFC 1332
	#⊃ в рамках PPP
	
	
	PPP
	#RFC 1661
	#Point-to-Point Protocol
	#семейство протоколов
		LCP
		#протокол управления линией связи
		NCP
		#протокол управления сетью
		PAP
		#протокол аутентификации
		CHAP
		#протокол аутентификации
		MLPPP
		#многоканальный протокол
	#двух точечный протокол канального уровня OSI
	#обычно исп для установления прямой связи между двумя узлами
	#может обеспечить
		аутентификацию соединения
		шифрование
		#с исп
			ECP
			RFC 1968
			сжатие
	#исп на многих типах физических сетей
		нуль-модемный кабель
		телефонные линии
		сотовая связь
		...
	#подвиды
		PPPoE
		#over Ethernet| иногда DSL
		PPPoA
		#over ATM
		#исп для подключения по AAL5
	
	
	Zeroconf
	#RFC 3927
	#настройка сетевого адреса, определение имени, поиск служб




ATM Adaptation Layer 5
#AAL5
#осн альтернатива PPPoE для DSL


RIR
#regional internet Registry
    РЕГИСТРАТОРЫ
    #получают блоки и номера автономных сисм у IANA
    #выдают блоки LIR
	ARIN
	#обслуживает
		Северную Америку
		Багамы
		Пуэро-Рико
		Ямайку
	APNIC
	#обслуживает
		Южную Азию
		Восточную Азию
		Юго-Восточную Азию
		Австралию
		Океанию
	AfriNIC
	#обслуживает
		Африку
		Страны Индийского Океана
	LACNIC
	#обслуживает
		Южную Америку
		Страны бассейна Карибского моря
	RIPE NCC
	#обслуживает
		Европу
		Центральную Азию
		Ближний восток
LIR
#Local Internet Registries - локальные регистраторы
#получают адреса у RIR
HTTPS
#как происходит шифрование?
#уровень по модели OSI прикладной, семейство TCP/IP
#создан 2000(?разработан Netscape Communications для Netscape Navigator в 1994)
	порт/id: 443/TCP
#расширение HTTP(не отдельный протокол)
#данные передаются поверх TLS|SSL
#защищает от 
	снифферских атак
	man-in-the-middle
	#if исп шифрование и доверенный сертификат сервера
#для подготовки сервера к обработке https-соединений админ должен поставить в сисму сертификат открытого & закрытого ключа для сервера
	#сертификат открытого ключа подтверждает принадлежность ключа владельцу сайта
	#сертификат открытого ключа и ключ отдаются клиенту при соединении
	#закрытый ключ исп для расшифровки сообщений клиента
	вроде как одним ключем очень просто шифровать ,но очень сложно расшифровать
#можно создать сертификат без центра сертификации
	самоподписанные сертификаты
	#self-signed
	#такие сертификаты подписываются этим же сертификатом
	#без проверки сертификата другим способом подвержено man-in-the-middle
#эта сисма также может исп для аутентификации 
	#админ обычно создает сертификаты ∀ пользователю и отдает их пользователям(по которым они авторизуются)
#для шифрования исп длинны ключа
	40бит(IE<4.0(экспортные ограничения США))(абсолютно ненадежна)
	56бит
	128бит
	256бит
	#многие браузеры не поддерживают длинны от 128 -> не поддерживаются сайтами
#обычно один IP - один https сайт
	#для работы нескольких с различными сертификатами исп SNI


ИДЕНТИФИКАЦИЯ В HTTPS
	СЕРВЕРА
	#https/tls запросы генерятся разыменованием URI -> хост становится известен клиенту
	#в начале общения сервер отдает свой сертификат -> клиент его идентифицирует для исключения man-in-the-middle
		#сертификат ⊃ URI сервера
		#согласование имени хоста и данных сертификата происходит в соотв RFC 2459
			#if имя сервера!=указанное в сертификате -> браузер сообщает пользователю
	
	КЛИЕНТА
	#обычно сервер !⊃ достаточной информации о клиенте, но для повышенной защиты исп two-way-authentificaton
	
УЯЗВИМОСТИ HTTPS
	СОВМЕСТНОЕ ИСП С HTTP
	#потенциальная дыра
	#пример
		основные страницы исп HTTPS, css и js по http
			при загрузке последних можно подкинуть свой код для получения данных html-страницы
			#может быть предотвращен HSTS
	АТАКИ С ИСП АНАЛИЗА ТРАФИКА
	
	
АТАКИ С АНАЛИЗОМ ТРАФФИКА
#вывод свв шифрованных данных по их размеру и времени передачи
#возможны тк SSL/TLS Δ содержимое, но почти не меняет размер/время передачи 


HSTS
#механизм
#закрывает уязвимость http+https принудительным исп https вместо http

two-way-authentification
#поле удостоверения сервера, он также запрашивает сертификат клиента


Server Name Indication
#SNI
#расширение TLS, для работы неск сайтов с разными сертификатами на одном IP
	

СНИФФИНГ
#атака основанная на прослушивании соединения

MAN-IN-THE-MIDDLE
#атака основанная на прослушивании соединения
#сервер https отправляет сертификат с отрытым ключом, if он не заслуживает доверия -> канал уязвим
#замена сертификата удостоверяющего сервер
#успешна if пользователь не проверяет сертификат дважды при предупреждении браузером
	#распространено среди user'ов часто сталкивающихся с самозаверенными сертификатами внутри частных сетей
#злоумышленник - шлюз между клиентом и сервером, через который идет ∀ трафик который он может перенаправлять
#алгоритм
	злоумышленник встраивается между клиентом и сервером
	пересылает ∀ msg без Δ
	перехватывает msg сервера посланных шлюзу по умолчанию
	создает самозаверенный сертификат и подменяет им сертификат сервера
	отправляет ложный сертификат клиенту
	if клиент подтвердит сертификат ->
		устанавливаются защищенные соединения клиент-шлюз и шлюз-сервер
		#теперь у него ∃ закрытый ключ которым от полностью дешифрует трафик



ШЛЮЗ ПО УМОЛЧ
#в маршрутизируемых протоколах шлюз на который отправляется пакет if маршрут к сети назначения не известен(не задан явно в талице маршрутизации хоста)
#запись в талицие маршрутизации <adress> <mask>
#устройство соединяющее сети с разной средой передачи(медь/опта)|протоколами
#разделяет потоки информации идущие из одной сети в другую и потоки в одной сети
#упрощает координацию трафика, направляя его в центральный маршрутизатор
#if "центральных маршрутизаторов" несколько - может и не указываться => при отправке пакета в сеть для которой !∃ маршрута -> консоль вернет "no route to host" а отправителю ICMP-msg типа 3 "Host Unreachable"
ТАБЛИЦА МАРШРУТИЗАЦИИ
#конечные пк обычно только передают данные ближайшему шлюзу -> таблица маршрутизации простейша ⊃
	обратная петля
	локальная сеть(|сегмент где распологается машина)
	шлюз по умолчанию(для перенаправления ∀ остального трафика)
	широковещательный адрес
	
TLS
#криптографический протокол используемый HTTPS
#транспортный механизм
#исп ассиметричную(для выработки общего секретного ключа)&симметричную(обмен данными зашифрованных общим ключом) схемы шифрования


СХЕМЫ ШИФРОВАНИЯ
	АССИМЕТРИЧНАЯ 
	
	СИММЕТРИЧНАЯ

SSL
#криптографический протокол используемый HTTPS
#устарел в 2015
#транспортный механизм

	
IETF
#видимо очередная огранизация интернета


КЛАССЫ СОСТОЯНИЯ

	1XX		INFORMATIONAL
	#информирование о процессе передачи
	#HTTP/1.0	игнорируются
	#HTTP/1.1	клиент должен быть готов принять этот класс msg как обычный ответ, но ничего не возвращать
	#msg сервера ⊃ только стартовую строку и(if требуется) неск специфичных для ответа полей заголовка
	#прокси должны отправлять такие msg клиенту
	#!⊃ тело
	
	2XX		SUCCESS
	#успешное принятие и обработка, в зависимости от статуса может ⊃ еще заголовки и тело
	
	
	3XX		REDIRECTION
	#сообщает что для успешного exe нужен еще запрос(обычно по другому URI)
	#адрес передается в заголовке Location(допускается исп фрагментов целевого URI)
	
	
	4XX		CLIENT ERROR
	#ошибка со стороны клиента
	#при исп ∀ методов кроме HEAD тело должно ⊃ гипертекстовое пояснение для пользователя(вроде 404)
	
	
	5XX		SERVER ERROR
	#ошибка сервера
	#при исп ∀ методов кроме HEAD тело должно ⊃ гипертекстовое пояснение для пользователя
	
	
	
КОДЫ СОСТОЯНИЯ
#определяют дальшейшее содержимое и поведение клиента
#⊃ первой строки ответа
	<класс_состояния>XX
#стандарт описываемый соотв RFC
#введение новых согласуется с IETF
#клиент может не знать ∀ состояния но должен реагировать в соотв с классом кода	

	
	200 Ok
	#в тело ответа следует включить msg об итоге exe запроса
	#ответ на PUT if ресурс Δ?
	
	
	201 Created
	#Webpage Created
	#должен ⊃ Location
	
	203
	#запрашиваемые данные отделены от заголовка двумя переводами строки CRLF CRLF
	
	204 No Content
	#ответ на PUT if ресурс Δ
	#!⊃ тело
	
	
	206 Partial Content
	#вроде исп при докачке(запросе с не первого байта файла)
	#см примеры-> докачка
	
	
	300 Multiple Choices
	#исп в типе согласования AGENT-DRIVEN
	#может ⊃ список вариантов для выбора
	
	301 Moved Permanently
	#относится непосредственно к перенаправлению
	
	
	302 Found
	#относится непосредственно к перенаправлению
	
	303 See Other
	#относится непосредственно к перенаправлению
	
	304 Not Modified
	#!⊃ тело
	#возвращается при ∃ в запросе If-Modified-Since с корректной датой и Δ ресурса с этого времени
	
	305
	#относится непосредственно к перенаправлению
	
	
	307 Temporary Redirect
	#относится непосредственно к перенаправлению
	
	
	401 Unauthorize
	#пользователь не авторизован
	
	
	403 Access Forbidden
	#Access allowed only for registered users
	
	
	
	404 Not Found
	#
	
	
	405 Method Not Allowed
	#метод известен, но неприменим к конкретному ресурсу
	#серверу следует включить в msg заголовок Allowed ⊃ список поддерживаемых методов
	
	406 Not Acceptable
	#исп в типе согласования AGENT-DRIVEN
	#может ⊃ список вариантов для выбора
	
	416 Requested Range Not Satisfiable
	#может исп для окончания загрузки файла без указания его размера в ответе(видимо напр для потокового видео)


satisfiable:eng: выполним, удовлетворяем	


	501	Not Implemented
	#сервер не распознал метод|заголовок или он не допустим в текущих условиях
	#серверу следует включить в msg заголовок Allowed ⊃ список поддерживаемых методов
	#сервер не должен игнорить некорректные заголовки Content-*	
	
	
	507
	#Insufficient Storage
insufficient:eng:недостаточное
МЕТОДЫ HTTP
#{xn} ∀ символов кромме управляющих и разделителей 
#указывает на осн операцию над ресурсом
#обычно короткое слово в UPPER
#сервер может исп ∀ методы(!∃ обязательных)

	GET
	#!Δ данные сервера -> считается безопасным
	#запрос содержимого ресурса|начало какого-либо процесса(следует ⊃ информацию о ходе exe процесса)
		#параметры exe процесса можно передавать в URI целевого ресурса после "?"
			GET /path/resource?param1=value1&param2=value2 HTTP/1.1
	#согласно стандарту HTTP запросы - идемпотентны(сервер возвратит тот же результат if ресурс !Δ) - позволяет корретное кеширование
	#⊃ доп виды(порядок их exe определен стандартами отдельно)
		УСЛОВНЫЙ GET
		#⊃ заголовки
			If-Modified-Since
			If-Match
			If-Range
			...
		ЧАСТИЧНЫЙ GET
		#⊃ в запросе Range
		
		
	HEAD
	#!Δ данные сервера -> считается безопасным
	#~GET, но ответ сервера !⊃ тело
	#исп для 
		извлечения метаданных
		проверка наличия ресурса(валидация URL)
		проверка Δ с последнего обращения
	#могут кешироваться - при != метаданных ресурса с соотв информацией в кеше - копия помечается устаревшей
	
	
	POST
	#передача данных ресурсу
	#пример
		клиенты блога могут вводить комментарии в HTMl-форму которые передаются POST и сервер помещает их на страницу
		загрузка файлов на сервер
	#передаваемые данные ⊂ в тело запроса
	#не индепотентен
	#ответ не кешируется
	#ответ вроде может ⊃ 200/201
	#в фундаментальном отличии от PUT, предпологает что по указанному URI переданное содержимое будет обрабатываться
	#пример: страница отправки email ⊃ вложенные файлы(множественное содержимое) -> клиент формирует сообщение типа multipart/form-data интегрируя в него письмо и файлы
		POST /send-message.html HTTP/1.1
		Host: mail.eample.com
		Referer: http://mail.example.com/send-messag.html
		User-Agent: BrowserForDummies/4.67b
		Content-Type: multipart/form-data;  boundary="Asrf456BGe4h"
		Content-Length: <Σ V ⊃ дочерние заголовки>
		Connection: keep-alive
		Keep-Alive: 300
		</n>
		<?отсутствующая преабула>
		--Asrf456BGe4h
		Content-Disposition: form-data; name="DestAddress"
		</n>
		brutal-vasya@example.com
		--Asrf456BGe4h
		Content-Disposition: form-data; name="MessageTitle"
		</n>
		Я негодую
		--Asrf456BGe4h
		Content-Disposition: form-data;  name="MessageText"
		</n>
		Привет, Василий! Твой ручной лев, кторого ты оставил у меня
		на прошлой неделе, разодрал весь мой диван.
		Пожалуйста, забери его скорее!
		Во вложении две фотки с последствиями.
		--Asrf456BGe4h
		Content-Disposition: form-data; name="AttachedFile1"; filename="horror-photo-!.jpg"
		Content-Type: image/jpeg
		</n>
		<bin содержимое первого img>
		--Asrf456BGe4h
		Content-Disposition: form-data; name="AttachedFile2"; filename="horror-photo-2.jpg"
		Content-Type: image/jpeg
		</n>
		<bin содержимое второго img>
		--Asrf456BGe4h--
		<отсутствующий эпилог>
		
		
	OPTIONS
	#определение возможностей сервера|параметров соединения для конкретного ресурса
	#в ответ серверу следует ⊃ заголовок Allow ⊃ список поддерживаемых методов, также в заголовке ответа можно ⊃ поддерживаемые расширения
		#узнать возмножности ∀ сервера|проверка работоспособности(~ping)|проверка на поддержку HTTP/1.1
	#видимо HTTP/1.1+
	#результат не кешируется
	
	
	PUT
	#передача информации в теле
	#загрузка содержимого на указанный URI
	#if по указанному URI !∃ ресурс -> 201
	#if ресурс Δ		-> 200 | 204
	#сервер не должен игнорить некорректные заголовки Content-* ⊃ msg
	#в фундаментальном отличии от POST, исп PUT клиент предпологает что загружаемое содержимое соотв находящемуся по URI ресурсу
	#сообщ ответов не кешируются
	
	
	PATCH
	#~ PUT, но применяется только к фрагменту ресурса
	#передача данных в теле
	
	
	DELETE
	#удаляет указанный ресурс
	
	
	TRACE
	#возвращает полученный запрос так, что клиент может увидеть информацию добавленную/Δ прокси в запросе
	
	
	CONNECT
	#преобразует соединение запроса в прозрачный TCP/IP-туннель
	#обычно исп для содействия установлению защещенного SSL-соединения через нефифрованный прокси
	
	
МЕТАДАННЫЕ
#лат meta - цель, конечный пункт, предел, край, данные
#информация о информации/доп информация о содержимом|obj
#позволяет искать/управлять сущностями в больших информационных потоках
#структурированные в виде иерархии - онтология|схема метаданных, напр
	XML-схема



ИДЕМПОТЕНТНОСТЬ
#свво obj|операции давать тот-же результат при повторном применении
ПО ДЛЯ РАБОТЫ С HTTP
#спеки http описывают поведение ∀ ролей
#одно по может одновременно exe fx ∀ ролей
	СЕРВЕРЫ
	#список:https://ru.wikipedia.org/wiki/Сравнение_веб-серверов/
		Apache
		IIS
		#Internet Information Servers
		nginx
		Google Web Server
		lighttpd
		...
	КЛИЕНТЫ
	#осн реализация - браузер(тк протокол разрабатывался именно для этого)
	ПРОКСИ
	#посредники для exe транспортных служб
	#список:https://ru.wikipedia.org/wiki/Сравнение_веб-серверов/
		Squid
		UserGate
		Multiproxy
		Naviscope
		nginx
для различия прокси/сервера в доках исп термин "origin server"



СЕССИИ
#серверный ~ кук


НОРМАЛИЗАЦИЯ URL
#исп поисковыми сисмами для снижения индексации дубликатов страниц и их расположения в порядке val
	типы
		сохраняющие исх адрес
			конвертация в lower case
			перевод управляющих конструкций в upper case
				http://www.example.com/a%c2%b1b -> http://www.example.com/a%C2%B1b
			перекодировка управляющих конструкций в явные символы
			#для связности процентные конструкции переводятся в символы
				Альфа			%41-%5A и %61-%7A
				Цифровые		%30-%39
				Дефис			%2D
				Точка			%2E
				Подчеркивание	%5F
				Тильда			%7E
			#не должны создаваться URI поставщиками и такие URI должны приводиться к символам
				http://www.example.com/%7Eusername/ -> http://www.example.com/~username/
			удаление def порта 
				http://www.example.com:80/bar.html -> http://www.example.com/bar.html
		НЕ сохраняющие исх адрес
			частично сохраняющие
			#для http и https могут привести к ~ url, не RFC 3986 это не гарантирует
				добавление /
				#демонстрация каталога
					нет способа узнать ⊂ ли URL путь каталогу
					#rfc 3986 : if url перенаправляет на нормализованный url -> это признак эквивалентности
			Δ исх адрес
				удаление головного индекса
					http://www.example.com/default.asp -> http://www.example.com/
				удаление фрагментов
				#не виден на сервере -> мб удален
					http://www.example.com/bar.html#section1 -> http://www.example.com/bar.html
				#одноко AJAX часто применяет var в таких фрагментах
				замена ip на домен
				#обратная замена мб небезопасной из-за исп виртуальных серверов
				удаление дублированных слешей
					http://www.example.com/foo//bar.html -> http://www.example.com/foo/bar.html
				удаление/добавление www как элта верхнего доменного уровня
				#некоторые сайты оперируют двумф интернет-доменами
					http://example.com/ и http;//www.example.com/
					#могут вести на один ресурс(перенаправляют с www на не www и наоборот)
				сортировка параметров запросов
				#напр в алфавитном с пересозданием
					http://www.example.com/display?lang=en&article=fred ->
					http://www.example.com/display?article=fred&lang=en
					#однако порядом мб значимым(не регламентируется стандартами) и var могут появляться неск раз
				удаление неисп var
				#хз как определять
				#параметр без val не означает что он не исп
				удаление параметров по def
				#
				удаление "?" при пустом запросе


OCLC
#некоммерческая организация чьи сервера объединяют 21000+ библиотек 63 стран
#исследования и технические разработки в области электронных библиотек
#Online Computer Library Center inc.(библиотечный)
#поддерживает


ISOC
#Internet Society
#международная организация 
#развитие, обеспечение доступности интернета
#предоставляет организационную основу? для других исследовательских/консультативных групп(IETF, IAB)


IAB
#группа занимающаяся развитием www


PURL
#Persistent Uniform Resource Locator(локатор)
#определитель местонахождения
#механизм и надежность ~ dns
#формат основан на URL, но в отличие от него неΔ
#предотвращает 404(тк dns+url не хватает гибкости)
#альтернатива URN
#создан в 96
#указывает на на расположение ресурса а запись в бд PURL ⊃ url перенаправляющий запрос через HTTP redirect
#при Δ url требуется Δ только бд purl
	СТРУКТУРА PURL
		<protocol>://<server>/<name>
		#пример
			http://purl.oclc.org/OCLC/PURL/FAQ
		#не поддерживает "~" и "#"
	НЕДОСТАТКИ
		лишнее звено
			лишний трафик
	ПРЕИМУЩЕСТВО
		URN сформируется нескоро
		PURL - быстрое, рабочее решение прямо сейчас
		может исп ∀ желающий
		формат полностью совместим с URN
		opensource
IETF
#Internet Engineering Task Force
#организация
#разрабатывает URN

УПРАВЛЯЮЩИЕ КОНСТРУКЦИИ URL
#процентные конструкции?
#что-то вроде управляющих {xn} unicode
#вроде начинаются с %
	http://www.example.com/a%C2%B1b
	#управляющие конструкции
		%C2%B1
uri
#uniform resource identifier - единообразный id ресурса(ранее universal resource identifier)
#{xn} символов идентифицирующая абстрактный |физический ресурс(файл, службу, email) прежде всего речь о ресурсах www
#простой/расширяемый способ id ресурсы
	#⊃ неск схем идентификации, еще неск в процессе создания
#т.к. не всегда указывате как получить ресурс -> это дает возможность описывать ресурсы которые нельзя получить через интерет(личность, авто, город) через RDF
#считается созданым вместе с url, концепция документирована в июне 94 в RFC 1630
#развивается в основном Консорциумом Всемирной паутины
#ПРИМЕРЫ
	АБСОЛЮТНЫЕ URI
		https://ru.wikipedia.org/wiki/URI
		ftp://ftp.is.co.za/rfc/rfc1808.txt
		file://C:\UserName.HostName\Projects\Wikipedia_Articles\URI.xml
		file:///C:/file.wsdl
		file:///Users/John/Documents/Projects/Web/MyWebsite/about.html
		ldap://[2001:db8::7]/c=GB?objectClass?one
		mailto:John.Doe@example.com
		sip:911@pbx.mycompany.com
		news:comp.infosystems.www.servers.unix
		data:text/plain;charset=iso-8859-7,%be%be%be
		tel:+1-816-555-1212
		telnet://192.0.2.16:80/
		urn:oasis:names:specification:docbook:dtd:xml:4.1.2
		urn:oid:1.2.840.113549.1.1.1
	ОТНОСИТЕЛЬНЫЕ URI
		/relative/URI/with/absolute/path/to/resource.txt
		//example.org/scheme-relative/URI/with/absolute/path/to/resource.txt
		relative/path/to/resource.txt
		../../../resource.txt
		resource.txt
		/resource.txt#frag01
		#frag01
		[пустая строка] — эквивалентно разбору идентификатора парсером с результатом [пустая строка], то есть ссылка ведёт на объект по умолчанию в схеме по умолчанию


СТРУКТУРА URI
	URI = [ схема ":" ] иерархическая часть [ "?" запрос ] [ "#" фрагмент ]
		схема
		#часто указывает на протокол
			http
			ftp
			file
			ldap
			mailto
			urn
		иерархическая часть
		#данные часто иерархически организованные совместно с данными неиерархической компоненты "запрос" идентифицируют ресурс в пределах видимостьи uri-схемы
		#обычно путь к ресурсу(может ⊃ адрес сервера)| id ресурса(в случае URN)
		фрагмент
		#необязателен
		#описан в RFC 3986
	#часть URI без схемы часто называют ссылкой(reference) URI
		#могут исп в 
			HTML
			XHTML
			XML
			XSLT
РАЗРЕШЕНИЕ URI
#превращение ссылки URI в абсолютный URI
XSLT
#?
mailto
#протокол
file
#протокол
ldap
#протокол


НЕДОСТАТКИ URI
#тк URL фундаментальное нововведение интернета -> uri документально закреплялся ⊃ полную обратную совместимость
	#как и в URL можно исп ограниченный набор символов меньше ASCII -> ссылки приходится кодировать
		uri
		"https://ru.wikipedia.org/wiki/Кириллица"
		кодируется в url как	 
		"https://ru.wikipedia.org/wiki/%D0%9A%D0%B8%D1%80%D0%B8%D0%BB%D0%BB%D0%B8%D1%86%D0%B0"
		#нарушает принцип интернационализма провозглашаемые ∀ организациями интернета вроде W3C ISOC
IRI
#Internationalized(международный) Resource Identifier
#решает проблемы URI/URL поддержкой юникода
#хз когда будет исп

OASIS
#еще одна организация интернета
#Orginization for the Advancement of Structured Information Standarts
#глобальный консорциум управляющий разработкой/конвергенцией?/принятием промышленных стандартов электронной коммерции в рамках международного информационного сообщества
#выпускает больше ∀ стандартов веб-служб



XRI
#Extensible Resource Identifier
#разработан OASIS
#формат стремящийся создать id независимые от контекста(протокола/домена/пути/app/платформы)

СИСМА ДОМЕННЫХ ИМЕН
#плохое решение навязывающее ресурсам иерархическую архитектуру не подходящую для гипертекстового веба

		
ISOC
#одна из организаций интернета

negotiation:eng:согласование


Transparent Content Negotiation
#независимая технология !⊂ HTTP
#TCN
#может исп с HTTP
#!= transparent negotiation
#transparent - доступность полного списка вариантов ресурса для ∀ участников процесса доставки данных


RFC
#документ?
	822
	#формат заголовков текстовых сетевых msg ARPA ⊃ формат заголовков HTTP msg
	1630
	#концепция uri
	#1998
	1867
	#формирование HTML-форм и вложение файлов
	2046
	#описывает общие правила работы с медиатипами multipart/*
		#if иное не определено конкретным медиатипом
	2295
	#описывает Transparent Content Negotiation(TCN)
	2396
	#новая версия uri, universan-> uniform
	2459
	#согласование имени хоста и данных сертификата
	2616
	#выделяет transparent negotiation
	2732
	#совместимость uri с ipv6
	#декабрь 99
	2818
	#HTTPS
	3305
	#анонс устаревания термина URL, приоритет URI
	#август 2002
	3986
	#январь 2005
	#текущая структура и синтаксис URI
		фрагмент
		#косвенно идентифицирует вторичный ресурс ссылкой на первичный с указанием доп информации
		#secondary мб ⊂ первичному/его представлением/другим ресурсмо
	#парсинг uri
	#нормализация url
	2718
	#процесс разработки новых схем URI
		схемы должны регистрироваться IANA
	2717
	#процедура регистрации схемы
ПАРСИНГ URI
#исп re
#RFC рекомендует шаблон
	^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	#подробнее:https://ru.wikipedia.org/wiki/URI
	
IANA
#Internet Assigned Numbers Authority
RDF
#Resource Desctiption Framework
#новейшая технология семантической паутины
#основан на URI

СВЯЗЬ URI,URL,URN
#URI =  URL|URN|URL+URN
#в посл время URI обозначают ∀ id str -> возм URL и URN скоро исчезнут
URL
#URI предоставляющий информацию о местонахождении ресурса кроме идентификации
#создан Тимом Бернсом-Ли в 1990 в Женеве в CERN(Conseil European pour la Recherche Nucleaire)
URN
#URL только идентифицирующий ресурс в опред ns(и соотв в опред контексте), без указания местонахождения
#примеры
	ISBN:0-395-36341-1
	#URI указывающий на книгу в ns ISBN, но не указывает где ее взять
	
	
ПРИМЕРЫ ДИАЛОГОВ HTTP
	ОБЫЧНЫЙ GET-запрос
		client
			GET /wiki/страница HTTP/1.1
			Host: ru.wikipedia.org
			User-Agent: Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9b5) Gecko/2008050509
			Firefox/3.0b5
			Accept: text/html
			Connection: close
			</n>
		server
			HTTP/1.1 200 OK
			Date: Wed, 11 Feb 2009 11:20:59 GMT
			Server: Apache
			X-Powered-By: PHP/5.2.4-2ubuntu5wm1
			Last-Modified: Wed, 11 Feb 2009 11:20:59 GMT
			Content-Language: ru
			Content-Type: text/html; charset=utf-8
			Content-Length: 1234
			Connection: close
			</n>
			<запрошенная страница в html>
			#ответ 203 ~
	
	
	ПЕРЕНАПРАВЛЕНИЯ
	#] компания Example Corp. ⊃ осн сайт http://example.com и домен псевдоним example.org, клиент посылает запрос страницы "О компании" на вторичный домен
		#браузер не указал фрагмент в запросе, тк нужен документ
		GET /about.html HTTP/1.1
		Host: example.org
		User-Agent: MyLonelyBrowser/5.0
		...
		
		сервер вернет код для постоянного перенаправления указав в Location целевой URL
		
		#браузер прокрутит страницу до фрагмента #contacts после загрузки
		#тело ⊃ ссылку для посетителя
		#Content-Type ⊃ харки тела, а не документа по URI перенаправления
		HTTP/1.x 301 Moved Permanently
		Location: http://example.com/about.html#contacts
		Date: Thu, 19 Feb 2009 11:08:01 GMT
		Server: Apache/2.2.4
		Content-Type: text/html; charset=1251
		Content-Length: 110
		</n>
		<html><body><a href="http://example.com/about.html#contacts">Click here</a></body></html>
	#] Example Corp ⊃ несколько сайтов с разными ccTLD -> запрос главной страницы example.com может быть таким
		GET / HTTP/1.1
		Host: example.com
		User-Agent: MyLonelyBrowser/5.0
		Accept: text/html, application/xhtml+xml, application/xml;q=0.9,*/*;q=0.8
		Accept-Language: ru, en-us;q=0.7,en;q=0.3
		Accept-Charset: windows-1251,utf-8;q=0.7,*;q=0.7
		
		#сервер учитывая Accept-Language формирует ответ с временным перенаправлением на example.ru
		HTTP/1.x 302 Found
		Location: http://example.ru/
		Cache-Control: private
		Date: Thu, 19 Feb 2009 11:08:01 GMT
		Server: Apache/2.2.6
	
	ДОКАЧКА И ФРАГМЕНТАРНОЕ СКАЧИВАНИЕ
	#] скачиваем со сбоями/многопоточно
		http://example.org/conf-2009.avi
		#V ~ 160mb
		client
			GET /conf-2009.avi HTTP/1.0
			Host: example.org
			Accept: */*
			User-Agent: Mozilla/4.0 *compatible; MSIE 5.0; Windows 98)
			Referer: http://example.org/
		
		server
			HTTP/1.1 200 OK
			Date: Thu, 19 Feb 2009 12:27:04 GMT
			Server: Apache/2.2.3
			Last-Modified: Wed, 18 Jun 2003 16:05:58 GMT
			ETag: "56d-9989200-1132c580"
			Content-Type: video/x-msvideo
			Content-Length: 160993792
			Accept-Ranges: bytes
			Connection: close
			</n>
			<bin содержимое файла>
		#исходя из val Content-Length клиент поделит объем на фрагменты и запросит их отдельных соединениях
		#if server не укажет размер - клиент не сможет реализовать фрагментарную загрузку(см Content-Length), но может скачивать файл пока server не вернет 416
		
		#] на 84mb соединение порвалось, при его возобновлении клиент пошлет запрос с указанием выдачи с последнего полученного байта
		#Referer указан тк сервер может не хранить данные о пред запросах	
			GET /conf-2009.avi HTTP/1.0
			Host: example.org
			Accept: */*
			User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)
			Range: bytes=88080384-
			Referer: http://example.org/
		
		server
		#Accept-Ranges - не обязателен тк клиент знает об этой возможности сервера(о передаче фрагмента понятно из 206)
			HTTP/1.1 206 Partial Content
			Date: Thu, 19 Feb 2009 12:27:08 GMT
			Server: Apache/2.2.3
			Last-Modified: Wed, 18 Jun 2003 16:05:58 GMT
			ETag: "56d-9989200-1132c580"
			Accept-Ranges: bytes
			Content-Range: bytes 88080384-160993791/160993792
			Content-Lenght6 72913408
			Connectoin: close
			Content-Type: video/x-msvideo
			</n>
			<bin представление файла с 84mb>
			
		client
		#клиент зная Σ V поделит его на фрагменты, загрузив начальный после первого запроса, прервав соединение когда дойдет до начала второго
			#пример запроса 4 секции
			GET /conf-2009.avi HTTP/1.0
			Range: bytes=6439716-80496894
			...
		
		server
			HTTP/1.1 206 Partial Content
			...
			Accept-Ranges: bytes
			Content-Range: bytes 64397516-80496894/160993792
			Content-Length: 16099379
			</n>
			<bin предсталение файла в указанном диапазоне>
			
		if подобный запрос отправить серверу без поддержки фрагментов -> вернет 200 без Accept-Ranges


ОСНОВНЫЕ МЕХАНИЗМЫ ПРОТОКОЛА

	ЧАСТИЧНЫЕ GET
	#запрос не ∀ содержимого ресурса, а указанный фрагмент
	#возм их exe не обязательна(желательна) для серверов
	#осн исп для 
		докачки
		многопоточной загрузки
		загрузки заголовка архива и для выборочного скачивания пользователем
	#клиент указывает в запросе Range с указанием диапазон	
		#if server не понимает его -> возвращет 200 как при обычном GET
		#else 206 ⊃ Content-Range
	#фрагменты могут передаваться 2мя способами:
		ответ ⊃ Content-Range с байтовым диапазоном в соотв с которым в тело {xn} помещаются фрагменты
		#Content-Length должен = Σ V ∀ фрагментов
		server указывает медиатип multipart/byteranges для основного содержимого и передает фрагменты указывая соотв Content-Range для ∀ элта
		
	УСЛОВНЫЕ GET
	#реализуется полем If-Modified-Sinse запроса
	#в ответ на условный GET тело передается только if ресурс менялся после указанной даты
		if статус ответа отличается от 200|дата в If-Modified-Since некорректна -> ответ ~ обычному GET
		if ресурс Δ после указанной даты	-> ответ как на обычный GET
		if ресурс !Δ	->	304
		
	СОГЛАСОВАНИЕ СОДЕРЖИМОГО
	#Content Negotiation
	#механизм авто определения нужного ресурса при ∃ нескольких разных версий
	#субьекты согласования
		ресурсы сервера
		возвращаемые страницы с err msg(403, 404, ...)
	#два основных типа согласования
	#мб исп одновременно/по отдельности
	#RFC 2616
	
	
		SERVER-DRIVEN
		#при ∃ неск версий ресурса сервер можен анализировать заголовки запроса для выдачи max подходящего по его мнению
		#в основном проверяются заголовки
			Accept
			Accept-Charset
			Accept-Encoding
			Accept-Languages
			User-Agent
		#желательно включать в ответ Vary ⊃ параметры по которым различается содержимое по URI
		#НЕДОСТАТКИ
			сервер лишь предпологает что нужно пользователю(ru|eng ...)
			заголовков Accept-* много, а ресурсов с неск версиями мало -> избыточная нагрузка на оборудование
			общему кэшу создается ограничение возможности выдавать один ответ на ~ запросы от разных пользователей(что очевидно)
			передача заголовков Accept лишает приватности
		
		
		AGENT-DRIVEN
		#клиентом
		#тип содержимого опред клиент
			#для этого сервер возвращает в ответе с кодом 300 | 406 ⊃ список вариантов для выбора
		#исп
			когда содержимое различается по max частым параметрам(язык, кодировка, ...) и исп публичный кеш
		#недостатки
			лишние запросы -> лишняя нагрузка
			
			
		transparent negotiation
		#предпочтительный способ исп agent-driven и server-driven
		#!=TCN
		#transparent- процесс не заменен(прозрачен) для клиента и сервера
		#исп общий кэш ⊃ список вариантов ~ agent-driven
			#if кэш понимает ∀ варианты -> сам сделает выбор
		#снижает нагрузки с сервера, исключает доп запрос клиента
		#подробно не описан в основных спеках HTTP
	
	
	МНОЖЕСТВЕННОЕ СОДЕРЖИМОЕ
	#MIME?(не уверен)
		ТИПЫ
			multipart
				/mixed
				#
				/byteranges
				#исп при запросах фрагментов в частичных GET
				/form-data
				#исп при отправке email ⊃ файлы(см POST), отправка фаилов через формы
		ПАРАМЕТРЫ
			boundry
			#разделитель между типами сообщений
			#пример: 
				#передаваемый из формы параметр DestAdress передает email, а след за ним AttachedFile1 отправляет bin содержимое .jpg		
	#HTTP поддерживает передачу неск сущностей в одном msg
		#сущности могут передаваться в виде
			одноуровневой {xn}
			иерархии с вложением элтов друг в друга
	#для обозначения исп медиатипы
		multipart/*
		#см RFC 2046
		#if получатель не знает типа - обрабатывает как multipart/mixed
	#server msg ⊃ множественное содержимое могут посылаться в ответ на частичные GET при запросе неск фрагментов ресурса -> исп multipart/byteranges
	#при отправке HTML-форм клиентом чаще исп POST
		#см POST
ОПРЕДЕЛЕНИЕ МЕСТОПОЛОЖЕНИЯ ПО IP
#ip зареган на конктретный город - эта инфа общедоступна, дальше может определить только пров

ОСОБЕННОСТИ HTTP
	устанавливает отдельную TCP-сессию на ∀ запрос
	#большинство протоколов предусматривают установление TCP-сессии(одна авторизация, с дальнейшими действиями в ее контексте)
		#в FTP|файловых протоколах тип ⊂ файле данных определяется по расширению
	#исп Content-Type позволяя однозначно определеить способ обработки полученных данных
		#особо важно при работе с CGI-скриптами, когда расширение файла указывает на необходимость запуска на сервере и отправки клиенту результатов exe программы в файле(при этом при разных args запроса и программы могут быть созданы ответы ∀ типов(напр img разных форматов)), а не на тип данных
	#в более поздник версиях можно делать неск запросов в одной TCP-сессии, но браузеры обычно запрашивают только страницу и ⊃ obj(img, css, ...) и сразу рвут сессию
	#для поддержки авторизованного доступа исп cookies
	#позволяет присылать на сервер параметры передаваемые CGI-скрипту(через формы)

cookies
#позволяют сохранить сессию даже при перезагрузках клиента/сервера