HTTP
#hyperTextTransfer Protocol - протокол передачи гипертекста
#протокол передачи данных прикладного уровня изначально - в виде гипертекстовых документов формата HTML
#исп для передачи ∀ данных
#основан на клиент-серверной архитектуре -> предпологает ∃
	клиентов
	#инициализирует соединение и посылвает запрос
	сервер
	#ожидает соединение для получения запроса и произведя действия возвращают msg ⊃ результат
#исп больше p2p
#исп как "транспорт" для других протоколов app-уровня 
	SOAP
	XML-RPC
	WebDAV
	...
#осн obj манипуляций - ресурс на который указывает uri в запросе клиента
	#ресурс - обычно файл, но мб и логический? obj | абстрация
#особенность - возможность указать в запросе и ответе способ предоставления одного ресурса по раличным параметрам
	формат
	кодировка
	язык
	..
	#для этого исп HTTP-заголовок
	#благодаря возм указания способа кодирования msg можно обмениваться bin данными хотя протокол - текстовый
#~FTP|SMTP
#для идентификации исп глобальные URI 
#в отличие от многих других протоколов не сохраняет состояния -> компоненты исп http могут сами сохранять состояние(куки/сессии)
#браузер может отслеживать задержки ответов на запросы
#сервер может ⊃ ip-адреса и заголовки запросов последних клиентов
	#сам протокол не осведомлен о состоянии


ИСТОРИЯ HTTP
	0.9
		упорядочивание правил взаимодействия клиент-сервер
		разделение компонентов клиент-сервер
		осн семантические/синтаксические положения
		строка запроса
			GET URI
			#поддерживал только GET
	1.0
	#практическая реализация
	#rfc 1945
	1.1
	#современная версия принятая в июне 1999
		режим постоянного соединения
		#TCP-соединение мб открытым после ответа на запрос -> неск запросов на соединение
		#клиент обязан посылать информацию о имени хоста к которому он обращается -> упрощение организации виртуального хостинго
			запрос должен ⊃ заголовок host
	2
	#11 feb 2015 финальный черновик
	#бинарный
	#мультиплексирование запросов
	#приоритизация запросов
	#сжатие заголовков
	#загрузка элтов || в одном TCP -соединении
	#поддержка проактивных push-уведомлений со стороны сервера
	
СТРУКТУРА HTTP
∀ HTTP-msg ⊃
	ЗАПРОС
		Starting line
		#тип msg
		#различаются для запроса/ответа
			<Method> <URI> HTTP/<ver>
				<Method>
				#тип запроса
				<URI>
				#путь к документу
			#пример
				GET /wiki/HTTP HTTP/1.0
				Host: ru.wikipedia.org
		Headers
		#определяет тело, параметры передачи, etc
		Message Body
		#данные отделенные пустой стрококй
		#необязательно
	ОТВЕТ
		Starting line
			HTTP/<ver> <status_code> <Reason_Phrase>
			<status_code>
			#код состояния
			#3 цифры
			<Reason_Phrase>
			#краткое пояснение
			#не влияет на msg необязательно
		#пример
			HTTP/1.0 200 OK


ЗАГОЛОВКИ
	Allow
	#может ⊃ список поддерживаемых методов
	#вроде возвращается при 501, 405
	Location
	#вроде возвращается при 201
	#⊃ URI нового ресурса
КОДЫ СОСТОЯНИЯ
#определяют дальшейшее содержимое и поведение клиента
	501	Not Implemented
	#сервер не распознал метод
	#серверу следует включить в msg заголовок Allowed ⊃ список поддерживаемых методов
	
	405 Method Not Allowed
	#метод известен, но неприменим к конкретному ресурсу
	#серверу следует включить в msg заголовок Allowed ⊃ список поддерживаемых методов
	
	200 Ok
	#в тело ответа следует включить msg об итоге exe запроса
	
	201 Created
	#должен ⊃ Location
МЕТОДЫ HTTP
#{xn} ∀ символов кромме управляющих и разделителей 
#указывает на осн операцию над ресурсом
#обычно короткое слово в UPPER
#сервер может исп ∀ методы(!∃ обязательных)

	GET
	#запрос содержимого ресурса|начало какого-либо процесса(следует ⊃ информацию о ходе exe процесса)
		#параметры exe процесса можно передавать в URI целевого ресурса после "?"
			GET /path/resource?param1=value1&param2=value2 HTTP/1.1
	#согласно стандарту HTTP запросы - идемпотентны(сервер возвратит тот же результат if ресурс !Δ) - позволяет корретное кеширование
	#⊃ доп виды(порядок их exe определен стандартами отдельно)
		УСЛОВНЫЙ GET
		#⊃ заголовки
			If-Modified-Since
			If-Match
			If-Range
			...
		ЧАСТИЧНЫЙ GET
		#⊃ в запросе Range
		
		
	HEAD
	#~GET, но ответ сервера !⊃ тело
	#исп для 
		извлечения метаданных
		проверка наличия ресурса(валидация URL)
		проверка Δ с последнего обращения
	#могут кешироваться - при != метаданных ресурса с соотв информацией в кеше - копия помечается устаревшей
	
	
	POST
	#передача данных ресурсу
	#пример
		клиенты блога могут вводить комментарии в HTMl-форму которые передаются POST и сервер помещает их на страницу
		загрузка файлов на сервер
	#передаваемые данные ⊂ в тело запроса
	#не индепотентен
	#ответ не кешируется
	#ответ вроде может ⊃ 200/201
	
	
	OPTIONS
	#определение возможностей сервера|параметров соединения для конкретного ресурса
	#в ответ серверу следует ⊃ заголовок Allow ⊃ список поддерживаемых методов, также в заголовке ответа можно ⊃ поддерживаемые расширения
		#узнать возмножности ∀ сервера|проверка работоспособности(~ping)|проверка на поддержку HTTP/1.1
	#видимо HTTP/1.1+
	#результат не кешируется
	
	
	PUT
	#
	
	
	PATCH
	#
	
	
	DELETE
	#
	
	
	TRACE
	#
	
	
	CONNECT
	#
	
	
МЕТАДАННЫЕ
#лат meta - цель, конечный пункт, предел, край, данные
#информация о информации/доп информация о содержимом|obj
#позволяет искать/управлять сущностями в больших информационных потоках
#структурированные в виде иерархии - онтология|схема метаданных, напр
	XML-схема



ИДЕМПОТЕНТНОСТЬ
#свво obj|операции давать тот-же результат при повторном применении
ПО ДЛЯ РАБОТЫ С HTTP
#спеки http описывают поведение ∀ ролей
#одно по может одновременно exe fx ∀ ролей
	СЕРВЕРЫ
	#список:https://ru.wikipedia.org/wiki/Сравнение_веб-серверов/
		Apache
		IIS
		#Internet Information Servers
		nginx
		Google Web Server
		lighttpd
		...
	КЛИЕНТЫ
	#осн реализация - браузер(тк протокол разрабатывался именно для этого)
	ПРОКСИ
	#посредники для exe транспортных служб
	#список:https://ru.wikipedia.org/wiki/Сравнение_веб-серверов/
		Squid
		UserGate
		Multiproxy
		Naviscope
		nginx
для различия прокси/сервера в доках исп термин "origin server"



СЕССИИ
#серверный ~ кук


НОРМАЛИЗАЦИЯ URL
#исп поисковыми сисмами для снижения индексации дубликатов страниц и их расположения в порядке val
	типы
		сохраняющие исх адрес
			конвертация в lower case
			перевод управляющих конструкций в upper case
				http://www.example.com/a%c2%b1b -> http://www.example.com/a%C2%B1b
			перекодировка управляющих конструкций в явные символы
			#для связности процентные конструкции переводятся в символы
				Альфа			%41-%5A и %61-%7A
				Цифровые		%30-%39
				Дефис			%2D
				Точка			%2E
				Подчеркивание	%5F
				Тильда			%7E
			#не должны создаваться URI поставщиками и такие URI должны приводиться к символам
				http://www.example.com/%7Eusername/ -> http://www.example.com/~username/
			удаление def порта 
				http://www.example.com:80/bar.html -> http://www.example.com/bar.html
		НЕ сохраняющие исх адрес
			частично сохраняющие
			#для http и https могут привести к ~ url, не RFC 3986 это не гарантирует
				добавление /
				#демонстрация каталога
					нет способа узнать ⊂ ли URL путь каталогу
					#rfc 3986 : if url перенаправляет на нормализованный url -> это признак эквивалентности
			Δ исх адрес
				удаление головного индекса
					http://www.example.com/default.asp -> http://www.example.com/
				удаление фрагментов
				#не виден на сервере -> мб удален
					http://www.example.com/bar.html#section1 -> http://www.example.com/bar.html
				#одноко AJAX часто применяет var в таких фрагментах
				замена ip на домен
				#обратная замена мб небезопасной из-за исп виртуальных серверов
				удаление дублированных слешей
					http://www.example.com/foo//bar.html -> http://www.example.com/foo/bar.html
				удаление/добавление www как элта верхнего доменного уровня
				#некоторые сайты оперируют двумф интернет-доменами
					http://example.com/ и http;//www.example.com/
					#могут вести на один ресурс(перенаправляют с www на не www и наоборот)
				сортировка параметров запросов
				#напр в алфавитном с пересозданием
					http://www.example.com/display?lang=en&article=fred ->
					http://www.example.com/display?article=fred&lang=en
					#однако порядом мб значимым(не регламентируется стандартами) и var могут появляться неск раз
				удаление неисп var
				#хз как определять
				#параметр без val не означает что он не исп
				удаление параметров по def
				#
				удаление "?" при пустом запросе


OCLC
#некоммерческая организация чьи сервера объединяют 21000+ библиотек 63 стран
#исследования и технические разработки в области электронных библиотек
#Online Computer Library Center inc.(библиотечный)
#поддерживает


ISOC
#Internet Society
#международная организация 
#развитие, обеспечение доступности интернета
#предоставляет организационную основу? для других исследовательских/консультативных групп(IETF, IAB)


IAB
#группа занимающаяся развитием www


PURL
#Persistent Uniform Resource Locator(локатор)
#определитель местонахождения
#механизм и надежность ~ dns
#формат основан на URL, но в отличие от него неΔ
#предотвращает 404(тк dns+url не хватает гибкости)
#альтернатива URN
#создан в 96
#указывает на на расположение ресурса а запись в бд PURL ⊃ url перенаправляющий запрос через HTTP redirect
#при Δ url требуется Δ только бд purl
	СТРУКТУРА PURL
		<protocol>://<server>/<name>
		#пример
			http://purl.oclc.org/OCLC/PURL/FAQ
		#не поддерживает "~" и "#"
	НЕДОСТАТКИ
		лишнее звено
			лишний трафик
	ПРЕИМУЩЕСТВО
		URN сформируется нескоро
		PURL - быстрое, рабочее решение прямо сейчас
		может исп ∀ желающий
		формат полностью совместим с URN
		opensource
IETF
#Internet Engineering Task Force
#организация
#разрабатывает URN

УПРАВЛЯЮЩИЕ КОНСТРУКЦИИ URL
#процентные конструкции?
#что-то вроде управляющих {xn} unicode
#вроде начинаются с %
	http://www.example.com/a%C2%B1b
	#управляющие конструкции
		%C2%B1
uri
#uniform resource identifier - единообразный id ресурса(ранее universal resource identifier)
#{xn} символов идентифицирующая абстрактный |физический ресурс(файл, службу, email) прежде всего речь о ресурсах www
#простой/расширяемый способ id ресурсы
	#⊃ неск схем идентификации, еще неск в процессе создания
#т.к. не всегда указывате как получить ресурс -> это дает возможность описывать ресурсы которые нельзя получить через интерет(личность, авто, город) через RDF
#считается созданым вместе с url, концепция документирована в июне 94 в RFC 1630
#развивается в основном Консорциумом Всемирной паутины
#ПРИМЕРЫ
	АБСОЛЮТНЫЕ URI
		https://ru.wikipedia.org/wiki/URI
		ftp://ftp.is.co.za/rfc/rfc1808.txt
		file://C:\UserName.HostName\Projects\Wikipedia_Articles\URI.xml
		file:///C:/file.wsdl
		file:///Users/John/Documents/Projects/Web/MyWebsite/about.html
		ldap://[2001:db8::7]/c=GB?objectClass?one
		mailto:John.Doe@example.com
		sip:911@pbx.mycompany.com
		news:comp.infosystems.www.servers.unix
		data:text/plain;charset=iso-8859-7,%be%be%be
		tel:+1-816-555-1212
		telnet://192.0.2.16:80/
		urn:oasis:names:specification:docbook:dtd:xml:4.1.2
		urn:oid:1.2.840.113549.1.1.1
	ОТНОСИТЕЛЬНЫЕ URI
		/relative/URI/with/absolute/path/to/resource.txt
		//example.org/scheme-relative/URI/with/absolute/path/to/resource.txt
		relative/path/to/resource.txt
		../../../resource.txt
		resource.txt
		/resource.txt#frag01
		#frag01
		[пустая строка] — эквивалентно разбору идентификатора парсером с результатом [пустая строка], то есть ссылка ведёт на объект по умолчанию в схеме по умолчанию


СТРУКТУРА URI
	URI = [ схема ":" ] иерархическая часть [ "?" запрос ] [ "#" фрагмент ]
		схема
		#часто указывает на протокол
			http
			ftp
			file
			ldap
			mailto
			urn
		иерархическая часть
		#данные часто иерархически организованные совместно с данными неиерархической компоненты "запрос" идентифицируют ресурс в пределах видимостьи uri-схемы
		#обычно путь к ресурсу(может ⊃ адрес сервера)| id ресурса(в случае URN)
		фрагмент
		#необязателен
		#описан в RFC 3986
	#часть URI без схемы часто называют ссылкой(reference) URI
		#могут исп в 
			HTML
			XHTML
			XML
			XSLT
РАЗРЕШЕНИЕ URI
#превращение ссылки URI в абсолютный URI
XSLT
#?
mailto
#протокол
file
#протокол
ldap
#протокол


НЕДОСТАТКИ URI
#тк URL фундаментальное нововведение интернета -> uri документально закреплялся ⊃ полную обратную совместимость
	#как и в URL можно исп ограниченный набор символов меньше ASCII -> ссылки приходится кодировать
		uri
		"https://ru.wikipedia.org/wiki/Кириллица"
		кодируется в url как	 
		"https://ru.wikipedia.org/wiki/%D0%9A%D0%B8%D1%80%D0%B8%D0%BB%D0%BB%D0%B8%D1%86%D0%B0"
		#нарушает принцип интернационализма провозглашаемые ∀ организациями интернета вроде W3C ISOC
IRI
#Internationalized(международный) Resource Identifier
#решает проблемы URI/URL поддержкой юникода
#хз когда будет исп

OASIS
#еще одна организация интернета
#Orginization for the Advancement of Structured Information Standarts
#глобальный консорциум управляющий разработкой/конвергенцией?/принятием промышленных стандартов электронной коммерции в рамках международного информационного сообщества
#выпускает больше ∀ стандартов веб-служб



XRI
#Extensible Resource Identifier
#разработан OASIS
#формат стремящийся создать id независимые от контекста(протокола/домена/пути/app/платформы)

СИСМА ДОМЕННЫХ ИМЕН
#плохое решение навязывающее ресурсам иерархическую архитектуру не подходящую для гипертекстового веба

		
ISOC
#одна из организаций интернета


RFC
#документ?
	1630
	#концепция uri
	#1998
	2396
	#новая версия uri, universan-> uniform
	2732
	#совместимость uri с ipv6
	#декабрь 99
	3305
	#анонс устаревания термина URL, приоритет URI
	#август 2002
	3986
	#январь 2005
	#текущая структура и синтаксис URI
		фрагмент
		#косвенно идентифицирует вторичный ресурс ссылкой на первичный с указанием доп информации
		#secondary мб ⊂ первичному/его представлением/другим ресурсмо
	#парсинг uri
	#нормализация url
	2718
	#процесс разработки новых схем URI
		схемы должны регистрироваться IANA
	2717
	#процедура регистрации схемы
ПАРСИНГ URI
#исп re
#RFC рекомендует шаблон
	^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	#подробнее:https://ru.wikipedia.org/wiki/URI
	
IANA
#Internet Assigned Numbers Authority
RDF
#Resource Desctiption Framework
#новейшая технология семантической паутины
#основан на URI

СВЯЗЬ URI,URL,URN
#URI =  URL|URN|URL+URN
#в посл время URI обозначают ∀ id str -> возм URL и URN скоро исчезнут
URL
#URI предоставляющий информацию о местонахождении ресурса кроме идентификации
#создан Тимом Бернсом-Ли в 1990 в Женеве в CERN(Conseil European pour la Recherche Nucleaire)
URN
#URL только идентифицирующий ресурс в опред ns(и соотв в опред контексте), без указания местонахождения
#примеры
	ISBN:0-395-36341-1
	#URI указывающий на книгу в ns ISBN, но не указывает где ее взять