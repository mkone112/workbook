индекс: i
# нужны для ускорения запросов
# можно писать свои индексы 9.6+

программные интефейсы?

интерфейс метода доступа?
классы операторов?
семейства операторов?

разделение сфер ответственности между общим механизмом индексирования 

отдельные методы индексного доступа
# сфера ответственности отличается от сферы ответственности общего механизма индексирования
    - реализация алг построения индекса
      разбиение данных по страницам(чтобы ЛЮБОЙ i однотипно обрабатывался менеджером буферного кеша(?))
    - поиск информации в i по exp 'индексированное-поле оператор выражение'
    - оценка стоимости использования i
    - работа с блокировками, для корректного || exe процесов
    - формирование журнала упреждающей записи(WAL)

WAL
#журнал упреждающей записи
 
общий механизм индексирования
#ПРИНАДЛЕЖ ядру СУБД
#сфера ответственности отличается от сферы ответственности отдельных методов индексного доступа
#позволяет легко встраивать в сис-му новые методы доступа
#основная задача - получение TID от метода доступа и работа с ними
    чтение из соотв версий строк таблицы
    выборка по отдельному TID|набору TID с построением битовой карты
    ?проверка видимости версий строк для текущей транзакции с учетом уровня изоляции
#участвует в запросах, вызывается в соотв с планом построенном на этапе оптимизации
    #оптимизатор перебирая и оценивая различные пути exe запроса, должен понимать возможности всех потенциально применимых методов доступа
        сможет ли метод отдавать данные в нужном порядке или нужно предусмотреть сортировку
        можно ли применить метод для поиска null
#при создании i сис-ме нужно решить можно ли его построить над несколькими столбцами, может ли он обеспечить уникальность
#9.6- использовал таблицу pg_am для предоставления i информации о себе, 9.6+ данные хранятся глубже - в спец fx(интерфейс)
#позволяет pl одинаково работать с разными i учивая их возможности
БИТОВАЯ КАРТА
#служебная структура сложных фс
#хранит данные о расположении данных
#КАЖД кластеру соотв 1 бит, наличие данных в кластере = 1
ИНДЕКСЫ
#=методы [индексного] доступа
#устанавливают соотв между ключем(например val проиндексированного столбца) и строками таблицы в которых этот ключ встречается
    'duck': [str3, str77, ...]
    #строки идентифицируются tuple id (TID) <номер_блока_файла>&<позиция_str_в_блоке>
    -> зная ключ или информацию о нем можно найти строки без просмотра всей таблицы
#db objs в основном для ускорения доступа
#вспомогательные структуры
#ЛЮБОЙ i можно удалить/восстановить по данным таблицы
#необходимы для функционировния СУБД тк поддерживают некоторые ограничения целостности
    Hash
    
    B-tree
    
    GiST
    
    SP-GiST
    
    GIN
    
    RUM
    
    BRIN
    
    Bloom
#любые операции ИЗМ табл требуют перестройки индекса В РАМКАХ ТОЙ-ЖЕ ТРАНЗАКЦИИ
    C_UD

HOT
#heap only tuples
#механизм обеспечивающий отсутствие необходимости перестройки индексов при ИЗМ полей без индексов