5 этапов
первые 3 exe материнка

плата с по в материнке посылает код на исполнение в cpu -> код выполняет проверку оборудования -> обращение к загрузочному разделу -> 2 этап(загрузчик) -> 3 этап(ядро) -> запуск пользовательских служб -> подсисма инициализации и управления службами


загрузчик
# подготавливает сисму к загрузке ядра ос
# для linux передает параметры запуска ядра
    grub
    # основной загрузчик большинства дистров gnu/linux
    # имеет свой shell
    # имеет версии для bios и uefi, но для последней не имеет подписи secure boot

    syslinux project
    # семейство из 3х загрузчиков
        syslinux
        # exe ~ grub fx
        isolinux
        # используется для загрузочных flash-накопителей, поддерживает фс компакт-дисков
        pxelinux
        # загружается по сети
    # версии uefi не имеют подписи ~ grub

    rEFInd
    # используется чтобы иметь возможность выбора ос при загрузке с uefi
    # имеет цифровую подпись и может передавать управление другим загрузчикам формата .efi

    Clover
    # аналог для Apple

    EFI BOOT STUB
    # ядро 3.3+ можно упаковать в .efi -> загрузчиком может быть само ядро

    LILO
    # один из первых мультизагрузчиков linux
    # устарел(но еще используется)

    ELILO
    # EFI LILO

ЯДРО
# лежит в boot/vmlinuz.
# `vm` - ядро будет размещено в виртуальной mem, `z` ядро упаковано, и требует распаковки(используется исполняемый код в начале архива)
# процессе запуска
    настраивается оборудование
    запускается
        менеджер mem
        планировщик
# дрова хранятся прямо в ядре, большая часть переферии не имеет дров в ядре, вместо этого во временной фс initrd.img распаковывается еще один файл, после запуска раздел удаляется, но не всегда, например он остается при запуске в live режиме и при использовании тонкого клиента
# после инициализации - передает управление системе инициализации

Запуск пользовательских служб
# после запуска ядра - с ним все еще нельзя взаимодействовать на прикладном уровне
    службы управления
        звуковыми устройствами
        мультимедийными клавишами
        запуска графической оболочки


D-Bus
# служба позволяющая взаимодействовать процессам
# например через нее служба управления звуковыми устройствами получает данные о нажатии клавиш громкости от службы распознавания нажитий
# позволяет создавать простые но эффективные службы

Подсистема инициализации и управления службами
# обычно имеет pid-1
# основной процесс запускающий остальные
    # часть процессов запускается by def
    # эти скрипты запускают другие скрипты

    systemd
    # самая популярная сисма инициализации, практически вытеснила альтернативы
    # хорошо || задачи
    # большая часть файлов подсисмы - конфиги ссылающиеся на конкретные утилиты и сервисы, но есть и собственные службы
    # взаимодействие служб через D-Bus
    # содержит супервизор - следит за тем чтобы критичные службы работали - перезапускает их при сбоях
    # СОДЕРЖ продвинутую сисму управления службами
        разрешение зависимостей
        || запуск
        отсрочка запуска
        перезапуск при ошибках
    # ВСЕ службы представлены юнитами, в каждом юните описаны параметры программы исполняемый файл и требования к запуску
        systemctl [enable|disable|is-enabled] <service>
        systemctl list-unit-files

    SYSVINIT
    # устарел, следует принципам заложенным в 80х для Unix System V
    # {xn} запускает службы, производит настройку с помощью скриптов
    # проще Systemd

    OPENRC
    # сисма инициализации разрабатываемая для gentoo
    # осовремененный sysvinit

    Runit
    # сисма инициализации

    Demontools
    # сисма инициализации

    S6
    # сисма инициализации


bios
# базовая сис-ма io
# набор по для взаимодействия с устройствами
# хранится в EEPROM
# при КАЖД старте - плата отправляет cpu код на exe -> bios проводит POST(проверку железа) и обращается к диску за первыми 512байтами(mbr)
    if подпись mbr=55AAh -> сис-ма exe код первичного загрузчика, в случае linux -> mbr передает управление основному загрузчику grub(распологается после mbr), до первого раздела <= 32kb свободного места(современные системы оставляют 1mb) - в нем и размещается grub
        таблица mbr вмещает всего 4 позициии -> max размер 2тб, использует адресацию с цилиндрами, головками и секторами hdd
    * недостатки
        работа в 16битном режиме
        {xn} проверка устройств
        загрузка only с mbr

efi
#интерфейс расширенной прошивки, разработан intel, позднее унифицирован до uefi

efi-раздел
# обычно 520-540мб, тк ранние версии efi могли выдавать err при работе с меньшими разделами, сейчас win использует 100мб
# обязательно содержит efi/boot/ с загрузчиком by def, но можно добавить свой загрузчик для win и ubuntu

pxe
# загрузка через сетевой интерфейс, первичный загрузчик в rom сетевухи, с помощью которого она получает основной загрузчик через протокол TFTP
# работает с bios и uefi
# используется для установки по сети и при работе с тонкими клиентами


uefi
#после проверки устройств - может самостоятельно обратиться к таблице разделов gpt, для поиска efi раздела
#+
    32+64bit режимы
    поддерживает gpt
    быстрее опрос оборудования


gpt
# оглавление таблицы gpt распологается в первом логическом блоке (lba1)
# использует разбиение на логические блоки - работает с современными hdd и ssd
# нулевой блок отдается под gpt для совместимости чтобы старые ос не перезаписали gpt
# КАЖД запись таблицы - 128байт - позволяет разметить огромные накопители, записей мб > 100, в конце таблицы - checksum(чего?), при повреждениях ос обращается к резервной копии из последних блоков накопителя

efi shell
# оболочка


УРОВНИ АВТОЗАГРУЗКИ ДОСТУПНЫЕ ДЛЯ ИСПОЛЬЗОВАНИЯ
    уровень ядра
    # можно указать любую программу для запуска после старта ядра вместо системы инициализации
        # с помощью параметра ядра init можно указать что запускать сразу после инициализации ядра
            init=<path_to_program>
        #es:
        sudo vi /boot/grub2/grub.cfg
        linux /vmlinuz-4.8.0-22-generic root=/dev/mapper/systems-ubuntu ro quiet init=/bin/bash
    автозагрузка системы инициализации
    # запуск
        основных системных сервисов
        дополнительных сервисов
        пользовательских скриптов
    автозагрузка rc.local
    # устарел, exe перед запуском графического окружения
    автозагрузка менеджера входа
    # запуск после менеджера входа, но до запуска графического окружения
    автозагрузка x-server
    # запуск после x-server
    автозагрузка окружения
    #
    автозагрузка bash
    # запуск на уровне отдельных сеансов shell