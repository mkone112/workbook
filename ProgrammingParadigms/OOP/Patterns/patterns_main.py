ПРИЕМЫ OBJ-ОРИЕНТИРОВАННОГО ПРОГРАММИРОВАНИЯ(design patterns, elements of reusable obj-oriented software)
ПАТТЕРНЫ ПРОЕКТИРОВАНИЯ
#описанные паттерны применимы не только к ооп, но и к любому проектированию по
#повторно используемые абстракции
#простые и изящные решения типичных задач оо проектирования
#м.б. реализованны на ЛЮБОМ оо яп
#позволяют строить более гибкие, модульные, повторно используемые и понятные конструкции(назначение ооп)
#делают архитектуру проще, компактнее и понятнее
#ЛЮБАЯ ХОРОШО СТРУКТУРИРОВАННАЯ ОО архитектура изобилирует паттернами. Внимание разработчиков к типичным взаимодействиям obj - один из критериев качества ОО сисмы
    ВОЗМОЖНОСТЬ ПОВТОРНОГО ПРИМЕНЕНИЯ УДАЧНЫХ РЕШЕНИЙ
    ПРИНЦИПЫ ПРИМЕНЕНИЯ ПАТТЕРНОВ ПРОЕКТИРОВАНИЯ
    КЛАССИФИКАЦИЯ ПАТТЕРНОВ
    ПОДХОДЫ К ВЫБОРУ ПАТТЕРНОВ ПРИ РЕШЕНИИ ЗАДАЧ
ПРИМЕР ПРОЕКТИРОВАНИЯ РЕДАКТОРА ДОКУМЕНТОВ
ПАТТЕРНЫ ПРОЕКТИРОВАНИЯ В СХЕМЕ MVC в яп Smalltalk
РЕШЕНИЕ ЗАДАЧ ПРОЕКТИРОВАНИЯ С ПОМОЩЬЮ ПАТТЕРНОВ
    ПОИСК ПОДХОДЯЩИЙ OBJ
    ОПРЕДЕЛЕНИЕ СТЕПЕНИ ДЕТАЛИЗАЦИИ OBJ
    СПЕЦИФИЦИРОВАНИЕ ИНТЕРФЕЙСОВ OBJ
    СПЕЦИФИЦИРОВАНИЕ РЕАЛИЗАЦИИ OBJ
    МЕХАНИЗМЫ ПОВТОРНОГО ИСПОЛЬЗОВАНИЯ
    СРАВНЕНИЕ СТРУКТУР ВРЕМЕНИ ВЫПОЛНЕНИЯ/КОМПИЛЯЦИИ
    ПРОЕКТИРОВАНИЕ С УЧЕТОМ БУДУЩИХ ИЗМЕНЕНИЙ
РЕКУРСИВНАЯ КОМПОЗИЦИЯ
ГЛИФЫ
ПАТТЕРН КОМПОНОВЩИК
ИНКАПСУЛЯЦИЯ АЛГОРИТМА ФОРМАТИРОВАНИЯ
КЛАСС Compositor
КЛАСС Composition
СТРАТЕГИЯ
МОНОГЛИФ
ПАТТЕРН ДЕКОРАТОР
АБСТРАГИРОВАНИЕ СОЗДАНИЯ OBJ
ФАБРИКИ И ИЗГОТОВЛЕННЫЕ КЛАССЫ
ПАТТЕРН АБСТРАКТНАЯ ФАБРИКА
ИНКАПСУЛЯЦИЯ ЗАВИСИМОСТЕЙ ОТ РЕАЛИЗАЦИИ
ПАТТЕРН МОСТ
ПАТТЕРН КОМАНДА
ПАТТЕРН ITERATOR
ПАТТЕРН VISITOR(ПОСЕТИТЕЛЬ)
ПОРОЖДАЮЩИЕ ПАТТЕРНЫ
    AbstractFactory
    Builder
    FactoryMethod
    Prototype
    Singleton
СТРУКТУРНЫЕ ПАТТЕРНЫ
    Adapter
    Bridge
    Composite
    Decorator
    Facade
    Flyweight
    Proxy(заместитель?)
ПАТТЕРНЫ ПОВЕДЕНИЯ
    Chain of Responsibility
    Command
    Interpreter
    Iterator
    Mediator
    Memento
    Observer
    State
    Strategy
    Template Method
    Visitor
ОБСУЖДЕНИЕ ПАТТЕРНОВ ПОВЕДЕНИЯ
    ИНКАПСУЛЯЦИЯ ВАРИАЦИЙ
    ДОЛЖЕН ЛИ ОБМЕН ИНФОРМАЦИЕЙ БЫТЬ ИНКАПСУЛИРОВАННЫМ|РАСПРЕДЕЛЕННЫМ
    РАЗДЕЛЕНИЕ ПОЛУЧАТЕЛЕЙ/ОТПРАВИТЕЛЕЙ
наследование интерфейса != наследование реализации