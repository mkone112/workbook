 Strict Mode?
	#const
		const a = 1;
		a = 'd';		>> Error
 fx как val?
	exp немедленно вызываемых fx (immediately invoked Function Expressions (IIFEs))?
идентификатор this?
Прототипы?
Старый и новый?
	Полифиллинг(polyfilling)?
	Транспиляция(transpiling)?
Не-JS?
семантическая верстка?
браузеры ⊃ интерактивный интерпритатор js
большинство операторов заканчиваются ;
exp - ∀ ссылка на var|val|набор var&val объединенных операторами
	оператор a = b * 2; ⊃ 4 exp
		2 : exp литерального val
		b : exp var означающего извлечение его текущего val
		b * 2
		a = b * 2 : exp присваивания
	типичное законченное exp - оператор-exp
		b * 2;
	оператор-exp вызова
		alert(a);
js - интерпритируемый с компиляцей на лету
Mastering The Developer Tools Console:http://blog.teamtreehouse.com/mastering-developer-tools-console
sh-enter
#ввод нескольких строк в консоли браузера
console
	.log()
	#вывод текста в консоль
	#кажется неявно приводит val к string для вывода
alert()
#оператор
ВВОД
самый распростаненный вариант - считать ввод из HTML-формы
prompt( "msg")
#~input python
переменные требуют объявления?
	var a;
	#в консоли
		b = 3
		#вполне пашет
clear()
#очистка вывода консоли
undefined
#~None python
#выводится в консоли
СОСТАВНЫЕ ОПЕРАЦИИ
	ПРИСВАИВАНИЯ
		+=
		*=
		-=
		/=
ИНКРЕМЕНТ, ДЕКРЕМЕНТ
	ПОСФИКСНЫЙ
		a++
		a--
obj
#val хранящие другие val в виде св-в
#поддерживают точечную и скобочную(bracket) нотацию
	obj.a
	obj["a"]
СРАВНЕНИЯ
	==
	#нестрогое
	===
	#строгое
	!=
	#нестрогое неравенство
	!==
	#строгое неравенство
	<=
	#меньше|нестрого равно
	>=
	#больше|нестрого равно
	&&
	#and
	||
	#or
Mozilla Developer Network(MDN)'s "Expressions and Operators":https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators
bool
	true
	false
string
	''
	""
ПРИВЕДЕНИЕ(coercion) ТИПОВ
	Number(obj)
	#приведение к number
НЕЯВНОЕ ПРИВЕДЕНИЕ
	в операции нестрогого равенства
		99.99 == "99.99"	>> true
		99.99 === "99.99" >> false
	при выводе console.log
	в exp ожидающих опред тип
		if (bool) {
			...
		}
	String => Number
код без комментов - не гуд
комменты должны объяснять
	почему и как
	но не что
//однострочные комменты
/*
	многострочные комменты
*/
могут быть использованы в ∀ месте
	var a = /* comment */ 42;
многострочные комменты не могут ⊃ "*/"
var - символьный контейнер
статическая типизация
#контроль типов
js - динамически типизирован(без контроля типов)
поднятие var - hoisting
объявление var вводит новый идентификатор инициализированный undefined
ОБЛАСТИ ВИДИМОСТИ
	global
	function(local)
	#при объявлении с var в fx - переменная доступна только в этой fx и вложенных в нее fx
	#for вроде не создают своей ns
		for (var i = 0; i< n;i++) {
			...
		}
		console.log(i)	>> ok
	повторное объявление ничего не меняет
		function a() {
			b = 2;
		}
		var b;			>> undefined
		console.log(b)				>> function b()
let
#ограничивает ns текущим блоком(∀ ⊃ напр for) и ∀ вложенными 
#интерпритатор присваивает v undefined при создании
v - переменная
возможно раньше var имели undefined до создания, но сейчас я такого точно не вижу
conts
#let запрещающий переназначение
	conts a = 1;
	a = 2; //TypeErr
	a++ 	   //
∀ ИСПОЛЬЗОВАТЬ const КРОМЕ СЛУЧАЕВ КОГДА ТРЕБУЕТСЯ Δ, ИНАЧЕ let
КОНКАТЕНАЦИЯ СТРОК
	amount = 99.99;
	amount += 's'; >> '99.99s'
УМНОЖЕНИЕ {xn} ПОХОДУ НЕ ПОДДЕРЖИВАЕТСЯ
	's' * 3	>> NaN
ИСПОЛЬЗУЙ ЯВНОЕ ПРИВЕДЕНИЕ  ∀ КОГДА ЭТО ВОЗМОЖНО
	n	= 10;
	res = 'str' + String(n);
первичная цель v управление состоянием
const используюстя для централизации установки val
СТИЛЬ_КОДА===========================================================================
	const CONSTANT_VARIABLE = ...
	let mutable_variable = ...
	let PSEUDO_CONST
	#константа по соглашению
	
		
/СТИЛЬ_КОДА==========================================================================
МЕТОДЫ===============================================================================
	float.toFixed( <presicion> ) -> String
		amount = 99.99;
		amount += 0.0001;
		amount.toFixed();	>> 200
		amount.toFixed(0);	>> 200
		amount.toFixed(1);	>> 200.0
		amount.toFixed(2);	>> 199.98
		
/МЕТОДЫ==============================================================================
(1,2);	>> 2
[1,2];	>> Array [1,2];
ES6==================================================================================
	const
	#слегка напоминает статическую типизацию
/ES6=================================================================================
допускается объединение операторов в блоки
	{
		a = 1;
		a++;
		console.log(a);
	}
УПРАВЛЕНИЕ_ПОТОКОМ===================================================================
if
#разумеется не требует ; в конце блока
#скобки в (cond) обязательны
	if (cond) {
		//code;
	}
	else {
		
	}
	if (true) console.log(1); // вроде ок
switch
#~ {xn} if...else
/УПРАВЛЕНИЕ_ПОТОКОМ==================================================================

ЦИКЛЫ================================================================================
	
/ЦИКЛЫ===============================================================================

BOOLEAN==============================================================================
	false: 
		0
		""
	if ('') 1; >> undefined
	Boolean(''); >> false
/BOOLEAN=============================================================================