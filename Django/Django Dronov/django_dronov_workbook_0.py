django 1.0 появился в 2005
frame-work - готовый каркас
framework - ∀-объемлющая библиотека 
для dj остается только писать код генерирующий страницы на основе данных из базы
dj следует современным стандартам веб-разработки
	архитектура "модель-контроллер-шаблон"
	использование миграций для внесения изменений в бд
	"написанное однажды применяется везде"
dj - полно-fx framefork
#для разработки среднестатического сайта достаточно только его ∃
dj - высокоуровневый framework
	самостоятельно выполняет типовые задачи
		соединение с бд
		обработка данных полученных от пользователя
		сохранение выгруженных пользователем данных
	предоставляет
		полно-fx подсис-му разграничения доступа
		исключительно мощную, удобно настраиваемую админку(в отличие от ∀ других фреймворков)
dj - удобен - содержит:
	легкий и быстрый отладочный сервер
	развитый механизм миграций
	дополнительные lib
		вывод граф миниатюр
		аутентификация через соцсети
		поддержка CAPTCHA
	основан на Python
	...
source готового сайта электронной доски объявлений: ftp://ftp.bhv.ru/9485977540582.zip | bhv.ru/<page_of_this_book>
используемое по
	Win 10 x64
	Django 2.1.3
	Django Simple Captcha 0.5.9
	django-precise-bbcode 1.2.9
	django-bootstrap4 		0.0.6(разработка) 0.0.7(проверка)
	Pillow					5.2.0
	django-cleanup			2.1.0
	easy-thumbnails			2.5
	Python Social Auth		2.1.0
	Django REST framework	3.8.2
	django-cors-headers		2.4.0
	mod-wsgi				4.6.4
	Angular					6.1.7
pip ⊂ в стандартную поставку Python 3.4+ 
pypi(python package index) реестр пакетов
pip требуется запускать с повышенными правами только if он установленн в директорию требующую соотв прав(напр Program Files)
django тянет за собой pytx
pytz
#библиотека 
#выполняет обработку val даты и времени с учетом временных зон
django-admin
#утилита exe административные задачи
	startproject
	#команда создания проекта
РАЗРАБОТКА ПРОЕКТА
	django-admin startproject samplesite
		samplesite
		#папка проекта
		#м.б. переименована
			manage.py
			#программный файл с кодом соответствующей утилиты сгенерированный djngo-admin
			#∀ что она делает - вызывает django-admin, передавая ей ∀ полученные команды и конфиругирует ее для обработки текущего проекта
			samplesite
			#формурует пакет Python ⊃ модули проекта и задают его конфигурация (⊃ основные настройки)(и конфигурацию ∀ приложений⊂проекту)
			#название = названию проекта, при его переименовании придется вносить серьезные правки в коде
			#в доках dj !⊃ внятного названия => будем называть его пакетом конфигурации
				__init__.py
				setting.py
				#модуль с настройками проекта
					#конфиг бд
					#пути ключевых dirs
					#параметры безопасности
					INSTALLED_APPS = [
						'django.contrib.admin',
						'django.contrib.auth',
						#реализует работу подсис-мы разграничения доступа
						'django.contrib.sessions',
						#реализует работу подсис-мы обслуживающей серверные сессии
					...
				urls.py
				#модуль маршрутизации уровня проекта
				wsgi.py
				#модуль связывающий проект с веб-сервером(используется для деплоя)
ОТЛАДОЧНЫЙ ВЕБ-СЕРВЕР DJ
#написан на Python
#сразу готов к работе, не требует сложной настройки
в связке PHP&Yii|Lavavel требуется устанавливать сервер для тестирования отдельно

manage.py
	runserver
	#запускает отладочный(только?) сервер
	#порт по умолчанию TCP 8000
	startapp
	#создание нового пустого приложения
app в терминологии dj - отдельный фрагмент функциональности сайта более-менее независимый от других
#может реализовывать работу ∀ сайта|раздела| внутренней подсис-мы используемой другими app
#пакет Python ⊃ модули
#пакет приложения(рядом с пакетом конфигурации)
#имя пакета = имя app
создаем сайт выводящий объявления оставленные пользователями
manage.py startapp bboard
	samplesite
		...
		bboard
		#формирует одноименный пакет app
			migrations
			#папка вложенного пакета ⊃ модули сгенерированных dj миграций
				__init__.py
				admin.py
				#модуль административных настроек и классов редакторов
				apps.py
				#модуль с настройками приложения
				models.py
				#модуль с моделями
				tests.py 
				#модуль с тестирующими процедурами
				#автор считает бесполезной и не рассматривает
				views.py
				#модуль с контроллерами
контроллер dj
#view, вьюха, представление(автор считает неудачным)
#контроллер - устоявшийся термин для таких программных модулей
#код запускаемый в ответ на поступление клиентского запроса содержащего url в опред формате
#выполняют ∀ действия по подготовке данных для вывода и обработку данных от пользователя
		контроллер-fx 
		#более универсальны, но трудоемки в разработке
		контроллер-класс
		#позволяют выполнить типовые задачи(вроде вывода списка каких-либо позиций) минимумом кода
dj не предъявляет к организации кода контроллеров никаких спец требований => можно помещать их в ∀ место ⊃ автоматически создаваемый views.py
∀ контроллер-fx в качетве единственного обязательного аргумента принимает экземпляр HttpResponse
django.http.HttpResponse
#при передаче контроллеру по традиции называется request
#при получении контроллером хранит различные сведения о полученном запросе
	запрашиваемый url
	данные полученные от пользователя
	служебная информация от браузера
МАРШРУТЫ И МАРШРУТИЗАТОР
	связываем(объявляем связь) url определенного формата(шаблонного url) с контроллером
	#объявляем маршрут
	#шаблонный url должен ⊃ только относительный путь без
		названия протокола
		адреса хоста
		порта
		набора GET-параметров
		имени якоря(?)
	#шаблонный url обязан:
		завершаться "/"
		не начинаться на "/"
оформим ∀ объявленные маршруты в виде списка маршрутов в строго определенном формате чтобы подсис-ма маршрутизатора могла его использовать
при поступлении ∀ запроса от клиента dj разбирает его на составные части(посредством "посредников")
посредники
#группа программных модулей
#извлекают запрошенный пользователем url, удаляют из него ∀ кроме пути который передается маршрутизатору
маршрутизатор ищет совпадение в списке urls и передает управление соотв. контроллеру
∀ эл-т списка маршрутов должен представляться результатом возвращаемым django.urls.path()
path(template, view)
#в качестве второго параметра может принимать список маршрутов уровня приложения	
		path('admin/',admin.site.urls)
создатели dj настоятельно не рекомендуют использовать для формирования списка маршрутов тупое добавление шаблонов и контроллеров в /<project>/urls.urlpatterns
#т.к. при большом числе маршрутов его будет сложно поддерживать(вообще делать что-либо вручную это очевидно хреново) =>
	вместо этого
		маршрутизатор dj при просмотре списка маршрутов не требует полного совпадения url из клиентского запроса и шаблона, достаточно лишь совпадения с началом реального(?полученный от клиента?существующий - просто полученный адрес!) тогда шаблонизатор удаляет из реального(?) адреса его начальную часть(префикс) совпавшую с шаблоном и запускает указанный в маршруте контроллер
			,но path() позволяет указать вторым параметром другой список маршрутов вместо view => можно указать для ∀ маршрута другой вложенный в него список маршрутов
				тогда маршрутизатор выполнит просмотр маршрутов ⊃ вложенному списку используя для сравнения адрес с уже удаленным префиксом
					=> можно создать иерархию списков маршрутов, 
						в списке маршрутов уровня проекта укажем маршруты указывающие на вложенные списки записанные в отдельных app(списки маршрутов уровня app)
							в списках маршрутов уровня app запишем контроллеры ⊂ логику сайта
вложенный список маршрутов передаваемый path() должен представлять собой результат django.urls.include()							
django.urls.include()
#one arg?
#принимает строку 
		
		
		
		
		
		
		

