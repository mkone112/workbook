автотесты должны просто и надежно запускаться при каждом изменении кода
для тестов используем dj
# фреймворк создания тестов dj построен на основе иерархии классов зависящих от unittest
    подходит для unit и интеграционного тестирования
    добавляет методы api и инструменты для тестирования веб и специфичного для dj поведения
        позволяет имитировать url-запросы
        добавление тестовых данных
        проверять выходные данные
        предоставляет api(LiveServerTestCase)
            #https://docs.djangoproject.com/en/1.10/topics/testing/tools/#liveservertestcase
            и инструменты для применения других фреймворков тестирования
            # https://docs.djangoproject.com/en/1.10/topics/testing/advanced/#other-testing-frameworks
                например selenium

LocalLibrary содержит страницы показа списка
     всех книг,
     авторов
     подробной информации о книгах `Book`
     подробной информации об `Author`
     страницу для обновления информации об экземпляре книги `BookInstance`
     страницы для создания, обновления, удаления записей Author и Book
тесты указывают на проблему в случае failed
тесты могут действовать как первый `настоящий пользователь` заставляя следить за объявлениями и документированием поведения сайта
часто тесты - основа создания кода и документации
тесты на основе поведения ?!= tdd

регрессионный тест
# воспроизводит исторические баги, сначала запускается для провеки что баг исправлен, затем чтобы он не был возвращен

черный ящик
# метод тестирования

белый ящик
# метод тестирования

canary
# канареечный метод тестирования

smoke test
# дымный метод тестирования

conformance test
# тест соответствия

acceptance test
# тест принятия

functional test
# функциональный тест

system test
# системный тест

load test
# загрузочный тест

тестирования сайта состоит из нескольких логических слоев

    http-запрос
    запрос к моделям
    валидация формы
    обработка формы
    рендеринг шаблонов


для написания теста нужно наследоваться от любого юнит-теста dj
    SimpleTestCase
    TransactionTestCase
    TestCase
    # чаще всего
    # создает чистую бд перед запуском
    # запускает кажд fx в собственной транзакции
    # имеет тестовый клиент(Client) для иммитации взаимодействия пользователя на уровне отображения
    LiveServerTestCase
  и реализовать методы проверки кода
тесты - fx утверждения
при запуске тестов dj exe соотв тесты
тесты запускаются отдельно начиная с setUp(метода настроек) и/или завершаясь методом разрушения(tear-down)
    class YourTestClass(TestCase):
        
        def setUp(self):
            # установки запускаются перед кажд тестом
        
        def tearDown(self):
            # очистка после каждого теста
        
        def test_something_that_will_pass(self):
            self.assertFalse(False)
        
        def test_something_that_will_fail(self):
            self.assertTrue(False)

нужно тестить весь свой код, но не fx python или dj

    # проверяем
        # текст для полей
        # размер поля для текста
        # get_absolute_url()
        # __str__
            # Тк это части бизнес-логики    
    class Author(models.Model):
        # не нужно проверять что они сохраняться в бд как char field - за это отвечает dj(хотя конечно данная fx все-равно проверяется косвенно)
        first_name = models.CharField(max_length=100)            
        last_name = models.CharField(max_length=100)            
        # не нужно проверять что это даты - это часть работы dj
        date_of_birth = models.CharField(max_length=100)
        date_of_death = models.CharField(max_length=100)
        
        def get_absolute_url(self):
            # reverse - часть dj -> тестим только то чтобы соотв вызов был верным
            return reverse('author-detail', args=[str(self.id)])
        
        def __str__(self):
            return '%s, %s' % (self.last_name, self.first_name)
            
            
даты могут быть ограничены или можно exe проверку чтобы рождения < смерти, оно мб в классе формы, или мб определены валидаторы этих полей - они будут проявляться только на уровне форм а не моделей

dj использует юнит-тестовый модуль(unittest) находящий тесты в текущей dir в файлах test*.py предоставляя соотв имена - можно выбрать любую структуру
    dir/
        tests/
            __init__.py
            test_models.py
            ...


часто будем добавлять тестовые классы для каждой модели/отображения/формы с отдельными методами проверки кажд функциональноси
    в некоторых случаях нужен будет отдельный класс для тестов особого варианта работы/функционала с отдельными fx тестирования
        напр отдельный класс тестирования валидности полей
            методы будут проверять каждый неверный вариант использования


AssertTrue
AssertFalse
AssertEqual
# реализованы в unittest
dj содержит кроме unittest`овских - еще специфичные для dj fx проверки например
    assertRedirects
    #проверка перехода к/из отображения
    assertTemplateUsed
    #проверка использования конкретного шаблона                    